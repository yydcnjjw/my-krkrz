// generated from gentext.pl Messages.xlsx
#include "tjsCommHead.h"
#include "tjsError.h"
#include "MsgIntf.h"
#include "SysInitIntf.h"
#include "MsgLoad.h"

static bool IS_LOAD_MESSAGE = false;
enum {
	NUM_TJS_INTERNAL_ERROR,
	NUM_TJS_WARNING,
	NUM_TJS_WARN_EVAL_OPERATOR,
	NUM_TJS_NARROW_TO_WIDE_CONVERSION_ERROR,
	NUM_TJS_VARIANT_CONVERT_ERROR,
	NUM_TJS_VARIANT_CONVERT_ERROR_TO_OBJECT,
	NUM_TJS_IDEXPECTED,
	NUM_TJS_SUBSTITUTION_IN_BOOLEAN_CONTEXT,
	NUM_TJS_CANNOT_MODIFY_LHS,
	NUM_TJS_INSUFFICIENT_MEM,
	NUM_TJS_CANNOT_GET_RESULT,
	NUM_TJS_NULL_ACCESS,
	NUM_TJS_MEMBER_NOT_FOUND,
	NUM_TJS_MEMBER_NOT_FOUND_NO_NAME_GIVEN,
	NUM_TJS_NOT_IMPLEMENTED,
	NUM_TJS_INVALID_PARAM,
	NUM_TJS_BAD_PARAM_COUNT,
	NUM_TJS_INVALID_TYPE,
	NUM_TJS_SPECIFY_DIC_OR_ARRAY,
	NUM_TJS_SPECIFY_ARRAY,
	NUM_TJS_STRING_DEALLOC_ERROR,
	NUM_TJS_STRING_ALLOC_ERROR,
	NUM_TJS_MISPLACED_BREAK_CONTINUE,
	NUM_TJS_MISPLACED_CASE,
	NUM_TJS_MISPLACED_RETURN,
	NUM_TJS_STRING_PARSE_ERROR,
	NUM_TJS_NUMBER_ERROR,
	NUM_TJS_UNCLOSED_COMMENT,
	NUM_TJS_INVALID_CHAR,
	NUM_TJS_EXPECTED,
	NUM_TJS_SYNTAX_ERROR,
	NUM_TJS_PPERROR,
	NUM_TJS_CANNOT_GET_SUPER,
	NUM_TJS_INVALID_OPECODE,
	NUM_TJS_RANGE_ERROR,
	NUM_TJS_ACCESS_DENYED,
	NUM_TJS_NATIVE_CLASS_CRASH,
	NUM_TJS_INVALID_OBJECT,
	NUM_TJS_CANNOT_OMIT,
	NUM_TJS_CANNOT_PARSE_DATE,
	NUM_TJS_INVALID_VALUE_FOR_TIMESTAMP,
	NUM_TJS_EXCEPTION_NOT_FOUND,
	NUM_TJS_INVALID_FORMAT_STRING,
	NUM_TJS_DIVIDE_BY_ZERO,
	NUM_TJS_NOT_RECONSTRUCTIVE_RANDOMIZE_DATA,
	NUM_TJS_SYMBOL,
	NUM_TJS_CALL_HISTORY_IS_FROM_OUT_OF_TJS2SCRIPT,
	NUM_TJS_NOBJECTS_WAS_NOT_FREED,
	NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER_CRLF,
	NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER,
	NUM_TJS_OBJECT_WAS_NOT_FREED_CRLF,
	NUM_TJS_OBJECT_WAS_NOT_FREED,
	NUM_TJS_GROUP_BY_OBJECT_TYPE_AND_HISTORY,
	NUM_TJS_GROUP_BY_OBJECT_TYPE,
	NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY_CRLF,
	NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY,
	NUM_TJS_OBJECT_COUNTING_MESSAGE_TJSGROUP_BY_OBJECT_TYPE,
	NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT_CRLF,
	NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT,
	NUM_TJS_WRITE_ERROR,
	NUM_TJS_READ_ERROR,
	NUM_TJS_SEEK_ERROR,
	NUM_TJS_BYTE_CODE_BROKEN,
	NUM_TJS_OBJECT_HASH_MAP_LOG_VERSION_MISMATCH,
	NUM_TJS_CURRUPTED_OBJECT_HASH_MAP_LOG,
	NUM_TJS_UNKNOWN_FAILURE,
	NUM_TJS_UNKNOWN_PACK_UNPACK_TEMPLATE_CHARCTER,
	NUM_TJS_UNKNOWN_BIT_STRING_CHARACTER,
	NUM_TJS_UNKNOWN_HEX_STRING_CHARACTER,
	NUM_TJS_NOT_SUPPORTED_UUENCODE,
	NUM_TJS_NOT_SUPPORTED_BER,
	NUM_TJS_NOT_SUPPORTED_UNPACK_LP,
	NUM_TJS_NOT_SUPPORTED_UNPACK_P,
	NUM_TVP_VERSION_INFORMATION,
	NUM_TVP_VERSION_INFORMATION2,
	NUM_TVP_DOWNLOAD_PAGE_URL,
	NUM_TVP_INTERNAL_ERROR,
	NUM_TVP_INVALID_PARAM,
	NUM_TVP_WARN_DEBUG_OPTION_ENABLED,
	NUM_TVP_COMMAND_LINE_PARAM_IGNORED_AND_DEFAULT_USED,
	NUM_TVP_INVALID_COMMAND_LINE_PARAM,
	NUM_TVP_NOT_IMPLEMENTED,
	NUM_TVP_CANNOT_OPEN_STORAGE,
	NUM_TVP_CANNOT_FIND_STORAGE,
	NUM_TVP_CANNOT_OPEN_STORAGE_FOR_WRITE,
	NUM_TVP_STORAGE_IN_ARCHIVE_NOT_FOUND,
	NUM_TVP_INVALID_PATH_NAME,
	NUM_TVP_UNSUPPORTED_MEDIA_NAME,
	NUM_TVP_CANNOT_UNBIND_XP3EXE,
	NUM_TVP_CANNOT_FIND_XP3MARK,
	NUM_TVP_MISSING_PATH_DELIMITER_AT_LAST,
	NUM_TVP_FILENAME_CONTAINS_SHARP_WARN,
	NUM_TVP_CANNOT_GET_LOCAL_NAME,
	NUM_TVP_READ_ERROR,
	NUM_TVP_WRITE_ERROR,
	NUM_TVP_SEEK_ERROR,
	NUM_TVP_TRUNCATE_ERROR,
	NUM_TVP_INSUFFICIENT_MEMORY,
	NUM_TVP_UNCOMPRESSION_FAILED,
	NUM_TVP_COMPRESSION_FAILED,
	NUM_TVP_CANNOT_WRITE_TO_ARCHIVE,
	NUM_TVP_UNSUPPORTED_CIPHER_MODE,
	NUM_TVP_UNSUPPORTED_ENCODING,
	NUM_TVP_UNSUPPORTED_MODE_STRING,
	NUM_TVP_UNKNOWN_GRAPHIC_FORMAT,
	NUM_TVP_CANNOT_SUGGEST_GRAPHIC_EXTENSION,
	NUM_TVP_MASK_SIZE_MISMATCH,
	NUM_TVP_PROVINCE_SIZE_MISMATCH,
	NUM_TVP_IMAGE_LOAD_ERROR,
	NUM_TVP_JPEGLOAD_ERROR,
	NUM_TVP_PNGLOAD_ERROR,
	NUM_TVP_ERILOAD_ERROR,
	NUM_TVP_TLGLOAD_ERROR,
	NUM_TVP_INVALID_IMAGE_SAVE_TYPE,
	NUM_TVP_INVALID_OPERATION_FOR8BPP,
	NUM_TVP_INVALID_OPERATION_FOR32BPP,
	NUM_TVP_SPECIFY_WINDOW,
	NUM_TVP_SPECIFY_LAYER,
	NUM_TVP_SPECIFY_LAYER_OR_BITMAP,
	NUM_TVP_CANNOT_ACCEPT_MODE_AUTO,
	NUM_TVP_CANNOT_CREATE_EMPTY_LAYER_IMAGE,
	NUM_TVP_CANNOT_SET_PRIMARY_INVISIBLE,
	NUM_TVP_CANNOT_MOVE_PRIMARY,
	NUM_TVP_CANNOT_SET_PARENT_SELF,
	NUM_TVP_CANNOT_MOVE_NEXT_TO_SELF_OR_NOT_SIBLINGS,
	NUM_TVP_CANNOT_MOVE_PRIMARY_OR_SIBLINGLESS,
	NUM_TVP_CANNOT_MOVE_TO_UNDER_OTHER_PRIMARY_LAYER,
	NUM_TVP_INVALID_IMAGE_POSITION,
	NUM_TVP_CANNOT_SET_MODE_TO_DISABLED_OR_MODAL,
	NUM_TVP_NOT_DRAWABLE_LAYER_TYPE,
	NUM_TVP_SOURCE_LAYER_HAS_NO_IMAGE,
	NUM_TVP_UNSUPPORTED_LAYER_TYPE,
	NUM_TVP_NOT_DRAWABLE_FACE_TYPE,
	NUM_TVP_CANNOT_CONVERT_LAYER_TYPE_USING_GIVEN_DIRECTION,
	NUM_TVP_NEGATIVE_OPACITY_NOT_SUPPORTED_ON_THIS_FACE,
	NUM_TVP_SRC_RECT_OUT_OF_BITMAP,
	NUM_TVP_BOX_BLUR_AREA_MUST_CONTAIN_CENTER_PIXEL,
	NUM_TVP_BOX_BLUR_AREA_MUST_BE_SMALLER_THAN16MILLION,
	NUM_TVP_CANNOT_CHANGE_FOCUS_IN_PROCESSING_FOCUS,
	NUM_TVP_WINDOW_HAS_NO_LAYER,
	NUM_TVP_WINDOW_HAS_ALREADY_PRIMARY_LAYER,
	NUM_TVP_SPECIFIED_EVENT_NEEDS_PARAMETER,
	NUM_TVP_SPECIFIED_EVENT_NEEDS_PARAMETER2,
	NUM_TVP_SPECIFIED_EVENT_NAME_IS_UNKNOWN,
	NUM_TVP_OUT_OF_RECTANGLE,
	NUM_TVP_INVALID_METHOD_IN_UPDATING,
	NUM_TVP_CANNOT_CREATE_INSTANCE,
	NUM_TVP_UNKNOWN_WAVE_FORMAT,
	NUM_TVP_CURRENT_TRANSITION_MUST_BE_STOPPING,
	NUM_TVP_TRANS_HANDLER_ERROR,
	NUM_TVP_TRANS_ALREADY_REGISTERED,
	NUM_TVP_CANNOT_FIND_TRANS_HANDER,
	NUM_TVP_SPECIFY_TRANSITION_SOURCE,
	NUM_TVP_LAYER_CANNOT_HAVE_IMAGE,
	NUM_TVP_TRANSITION_SOURCE_AND_DESTINATION_MUST_HAVE_IMAGE,
	NUM_TVP_CANNOT_LOAD_RULE_GRAPHIC,
	NUM_TVP_SPECIFY_OPTION,
	NUM_TVP_TRANSITION_LAYER_SIZE_MISMATCH,
	NUM_TVP_TRANSITION_MUTUAL_SOURCE,
	NUM_TVP_HOLD_DESTINATION_ALPHA_PARAMETER_IS_NOW_DEPRECATED,
	NUM_TVP_CANNOT_CONNECT_MULTIPLE_WAVE_SOUND_BUFFER_AT_ONCE,
	NUM_TVP_INVALID_WINDOW_SIZE_MUST_BE_IN64TO32768,
	NUM_TVP_INVALID_OVERLAP_COUNT_MUST_BE_IN2TO32,
	NUM_TVP_CURRENTLY_ASYNC_LOAD_BITMAP,
	NUM_TVP_FAILD_CLIPBOARD_COPY,
	NUM_TVP_INVALID_UTF16TO_UTF8,
	NUM_TVP_INFO_LOADING_STARTUP_SCRIPT,
	NUM_TVP_INFO_STARTUP_SCRIPT_ENDED,
	NUM_TVP_TJS_CHAR_MUST_BE_TWO_OR_FOUR,
	NUM_TVP_MEDIA_NAME_HAD_ALREADY_BEEN_REGISTERED,
	NUM_TVP_MEDIA_NAME_IS_NOT_REGISTERED,
	NUM_TVP_INFO_REBUILDING_AUTO_PATH,
	NUM_TVP_INFO_TOTAL_FILE_FOUND_AND_ACTIVATED,
	NUM_TVP_ERROR_IN_RETRIEVING_SYSTEM_ON_ACTIVATE_ON_DEACTIVATE,
	NUM_TVP_THE_HOST_IS_NOT_A16BIT_UNICODE_SYSTEM,
	NUM_TVP_INFO_TRYING_TO_READ_XP3VIRTUAL_FILE_SYSTEM_INFORMATION_FROM,
	NUM_TVP_SPECIFIED_STORAGE_HAD_BEEN_PROTECTED,
	NUM_TVP_INFO_FAILED,
	NUM_TVP_INFO_DONE_WITH_CONTAINS,
	NUM_TVP_SEPARATOR_CRLF,
	NUM_TVP_SEPARATOR_CR,
	NUM_TVP_DEFAULT_FONT_NAME,
	NUM_TVP_CANNOT_OPEN_FONT_FILE,
	NUM_TVP_FONT_CANNOT_BE_USED,
	NUM_TVP_FONT_RASTERIZE_ERROR,
	NUM_TVP_BIT_FIELDS_NOT_SUPPORTED,
	NUM_TVP_COMPRESSED_BMP_NOT_SUPPORTED,
	NUM_TVP_UNSUPPORTED_COLOR_MODE_FOR_PALETT_IMAGE,
	NUM_TVP_NOT_WINDOWS_BMP,
	NUM_TVP_UNSUPPORTED_HEADER_VERSION,
	NUM_TVP_INFO_TOUCHING,
	NUM_TVP_ABORTED_TIME_OUT,
	NUM_TVP_ABORTED_LIMIT_BYTE,
	NUM_TVP_FAILD_GLYPH_FOR_DRAW_GLYPH,
	NUM_TVP_LAYER_OBJECT_IS_NOT_PROPERLY_CONSTRUCTED,
	NUM_TVP_UNKNOWN_UPDATE_TYPE,
	NUM_TVP_UNKNOWN_TRANSITION_TYPE,
	NUM_TVP_UNSUPPORTED_UPDATE_TYPE_TUT_GIVE_UPDATE,
	NUM_TVP_ERROR_CODE,
	NUM_TVP_UNSUPPORTED_JPEG_PALETTE,
	NUM_TVP_LIBPNG_ERROR,
	NUM_TVP_UNSUPPORTED_COLOR_TYPE_PALETTE,
	NUM_TVP_UNSUPPORTED_COLOR_TYPE,
	NUM_TVP_TOO_LARGE_IMAGE,
	NUM_TVP_PNG_SAVE_ERROR,
	NUM_TVP_TLG_UNSUPPORTED_UNIVERSAL_TRANSITION_RULE,
	NUM_TVP_UNSUPPORTED_COLOR_COUNT,
	NUM_TVP_DATA_FLAG_MUST_BE_ZERO,
	NUM_TVP_UNSUPPORTED_COLOR_TYPE_COLON,
	NUM_TVP_UNSUPPORTED_EXTERNAL_GOLOMB_BIT_LENGTH_TABLE,
	NUM_TVP_UNSUPPORTED_ENTROPY_CODING_METHOD,
	NUM_TVP_INVALID_TLG_HEADER_OR_VERSION,
	NUM_TVP_TLG_MALFORMED_TAG_MISSION_COLON_AFTER_NAME_LENGTH,
	NUM_TVP_TLG_MALFORMED_TAG_MISSION_EQUALS_AFTER_NAME,
	NUM_TVP_TLG_MALFORMED_TAG_MISSION_COLON_AFTER_VAUE_LENGTH,
	NUM_TVP_TLG_MALFORMED_TAG_MISSION_COMMA_AFTER_TAG,
	NUM_TVP_FILE_SIZE_IS_ZERO,
	NUM_TVP_MEMORY_ALLOCATION_ERROR,
	NUM_TVP_FILE_READ_ERROR,
	NUM_TVP_INVALID_PRERENDERED_FONT_FILE,
	NUM_TVP_NOT16BIT_UNICODE_FONT_FILE,
	NUM_TVP_INVALID_HEADER_VERSION,
	NUM_TVP_TLG_INSUFFICIENT_MEMORY,
	NUM_TVP_TLG_TOO_LARGE_BIT_LENGTH,
	NUM_TVP_CANNOT_RETRIVE_INTERFACE_FROM_DRAW_DEVICE,
	NUM_TVP_ILLEGAL_CHARACTER_CONVERSION_UTF16TO_UTF8,
	NUM_TVP_REQUIRE_LAYER_TREE_OWNER_INTERFACE_INTERFACE,
	NUM_TVP_SCRIPT_EXCEPTION_RAISED,
	NUM_TVP_HARDWARE_EXCEPTION_RAISED,
	NUM_TVP_MAIN_CDPNAME,
	NUM_TVP_EXCEPTION_CDPNAME,
	NUM_TVP_CANNNOT_LOCATE_UIDLLFOR_FOLDER_SELECTION,
	NUM_TVP_INVALID_UIDLL,
	NUM_TVP_INVALID_BPP,
	NUM_TVP_CANNOT_LOAD_PLUGIN,
	NUM_TVP_NOT_VALID_PLUGIN,
	NUM_TVP_PLUGIN_UNINIT_FAILED,
	NUM_TVP_CANNNOT_LINK_PLUGIN_WHILE_PLUGIN_LINKING,
	NUM_TVP_NOT_SUSIE_PLUGIN,
	NUM_TVP_SUSIE_PLUGIN_ERROR,
	NUM_TVP_CANNOT_RELEASE_PLUGIN,
	NUM_TVP_NOT_LOADED_PLUGIN,
	NUM_TVP_CANNOT_ALLOCATE_BITMAP_BITS,
	NUM_TVP_SCAN_LINE_RANGE_OVER,
	NUM_TVP_PLUGIN_ERROR,
	NUM_TVP_INVALID_CDDADRIVE,
	NUM_TVP_CDDADRIVE_NOT_FOUND,
	NUM_TVP_MCIERROR,
	NUM_TVP_INVALID_SMF,
	NUM_TVP_MALFORMED_MIDIMESSAGE,
	NUM_TVP_CANNOT_INIT_DIRECT_SOUND,
	NUM_TVP_CANNOT_CREATE_DSSECONDARY_BUFFER,
	NUM_TVP_INVALID_LOOP_INFORMATION,
	NUM_TVP_NOT_CHILD_MENU_ITEM,
	NUM_TVP_CANNOT_INIT_DIRECT3D,
	NUM_TVP_CANNOT_FIND_DISPLAY_MODE,
	NUM_TVP_CANNOT_SWITCH_TO_FULL_SCREEN,
	NUM_TVP_INVALID_PROPERTY_IN_FULL_SCREEN,
	NUM_TVP_INVALID_METHOD_IN_FULL_SCREEN,
	NUM_TVP_CANNOT_LOAD_CURSOR,
	NUM_TVP_CANNOT_LOAD_KR_MOVIE_DLL,
	NUM_TVP_INVALID_KR_MOVIE_DLL,
	NUM_TVP_ERROR_IN_KR_MOVIE_DLL,
	NUM_TVP_WINDOW_ALREADY_MISSING,
	NUM_TVP_PRERENDERED_FONT_MAPPING_FAILED,
	NUM_TVP_CONFIG_FAIL_ORIGINAL_FILE_CANNOT_BE_REWRITTEN,
	NUM_TVP_CONFIG_FAIL_TEMP_EXE_NOT_ERASED,
	NUM_TVP_EXECUTION_FAIL,
	NUM_TVP_PLUGIN_UNBOUND_FUNCTION_ERROR,
	NUM_TVP_EXCEPTION_HAD_BEEN_OCCURED,
	NUM_TVP_CONSOLE_RESULT,
	NUM_TVP_INFO_LISTING_FILES,
	NUM_TVP_INFO_TOTAL_PHYSICAL_MEMORY,
	NUM_TVP_INFO_SELECTED_PROJECT_DIRECTORY,
	NUM_TVP_TOO_SMALL_EXECUTABLE_SIZE,
	NUM_TVP_INFO_LOADING_EXECUTABLE_EMBEDDED_OPTIONS_FAILED,
	NUM_TVP_INFO_LOADING_EXECUTABLE_EMBEDDED_OPTIONS_SUCCEEDED,
	NUM_TVP_FILE_NOT_FOUND,
	NUM_TVP_INFO_LOADING_CONFIGURATION_FILE_FAILED,
	NUM_TVP_INFO_LOADING_CONFIGURATION_FILE_SUCCEEDED,
	NUM_TVP_INFO_DATA_PATH_DOES_NOT_EXIST_TRYING_TO_MAKE_IT,
	NUM_TVP_OK,
	NUM_TVP_FAILD,
	NUM_TVP_INFO_DATA_PATH,
	NUM_TVP_INFO_SPECIFIED_OPTION_EARLIER_ITEM_HAS_MORE_PRIORITY,
	NUM_TVP_NONE,
	NUM_TVP_INFO_CPU_CLOCK_ROUGHLY,
	NUM_TVP_PROGRAM_STARTED_ON,
	NUM_TVP_KIRIKIRI,
	NUM_TVP_UNKNOWN_ERROR,
	NUM_TVP_EXIT_CODE,
	NUM_TVP_FATAL_ERROR,
	NUM_TVP_ENABLE_DIGITIZER,
	NUM_TVP_TOUCH_INTEGRATED_TOUCH,
	NUM_TVP_TOUCH_EXTERNAL_TOUCH,
	NUM_TVP_TOUCH_INTEGRATED_PEN,
	NUM_TVP_TOUCH_EXTERNAL_PEN,
	NUM_TVP_TOUCH_MULTI_INPUT,
	NUM_TVP_TOUCH_READY,
	NUM_TVP_CPU_CHECK_FAILURE,
	NUM_TVP_CPU_CHECK_FAILURE_CPU_FAMILY_OR_LESSER_IS_NOT_SUPPORTED,
	NUM_TVP_INFO_CPU_NUMBER,
	NUM_TVP_CPU_CHECK_FAILURE_NOT_SUPPRTED_CPU,
	NUM_TVP_INFO_FINALLY_DETECTED_CPU_FEATURES,
	NUM_TVP_CPU_CHECK_FAILURE_NOT_SUPPORTED_CPU,
	NUM_TVP_INFO_CPU_CLOCK,
	NUM_TVP_LAYER_BITMAP_BUFFER_UNDERRUN_DETECTED_CHECK_YOUR_DRAWING_CODE,
	NUM_TVP_LAYER_BITMAP_BUFFER_OVERRUN_DETECTED_CHECK_YOUR_DRAWING_CODE,
	NUM_TVP_FAILD_TO_CREATE_DIRECT3D,
	NUM_TVP_FAILD_TO_DECIDE_BACKBUFFER_FORMAT,
	NUM_TVP_FAILD_TO_CREATE_DIRECT3DDEVICE,
	NUM_TVP_FAILD_TO_SET_VIEWPORT,
	NUM_TVP_FAILD_TO_SET_RENDER_STATE,
	NUM_TVP_WARNING_IMAGE_SIZE_TOO_LARGE_MAY_BE_CANNOT_CREATE_TEXTURE,
	NUM_TVP_USE_POWER_OF_TWO_SURFACE,
	NUM_TVP_CANNOT_ALLOCATE_D3DOFF_SCREEN_SURFACE,
	NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICES,
	NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICES_UNKNOWN_REASON,
	NUM_TVP_BASIC_DRAW_DEVICE_TEXTURE_HAS_ALREADY_BEEN_LOCKED,
	NUM_TVP_INTERNAL_ERROR_RESULT,
	NUM_TVP_BASIC_DRAW_DEVICE_INF_POLYGON_DRAWING_FAILED,
	NUM_TVP_BASIC_DRAW_DEVICE_INF_DIRECT3DDEVICE_PRESENT_FAILED,
	NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_RESTART,
	NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_BAD_FLAGS,
	NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_BAD_PARAM,
	NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_FAILED,
	NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_BAD_MODE,
	NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_NOT_UPDATED,
	NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_UNKNOWN_REASON,
	NUM_TVP_FAILED_TO_CREATE_SCREEN_DC,
	NUM_TVP_FAILED_TO_CREATE_OFFSCREEN_BITMAP,
	NUM_TVP_FAILED_TO_CREATE_OFFSCREEN_DC,
	NUM_TVP_INFO_SUSIE_PLUGIN_INFO,
	NUM_TVP_SUSIE_PLUGIN_UNSUPPORTED_BITMAP_HEADER,
	NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICE,
	NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICE_UNKNOWN_REASON,
	NUM_TVP_COULD_NOT_CREATE_ANY_DRAW_DEVICE,
	NUM_TVP_BASIC_DRAW_DEVICE_DOES_NOT_SUPPORTE_LAYER_MANAGER_MORE_THAN_ONE,
	NUM_TVP_INVALID_VIDEO_SIZE,
	NUM_TVP_ROUGH_VSYNC_INTERVAL_READ_FROM_API,
	NUM_TVP_ROUGH_VSYNC_INTERVAL_STILL_SEEMS_WRONG,
	NUM_TVP_INFO_FOUND_DIRECT3DINTERFACE,
	NUM_TVP_INFO_FAILD,
	NUM_TVP_INFO_DIRECT3D,
	NUM_TVP_CANNOT_LOAD_D3DDLL,
	NUM_TVP_NOT_FOUND_DIRECT3DCREATE,
	NUM_TVP_INFO_ENVIRONMENT_USING,
	NUM_TVP_INFO_SEARCH_BEST_FULLSCREEN_RESOLUTION,
	NUM_TVP_INFO_CONDITION_PREFERRED_SCREEN_MODE,
	NUM_TVP_INFO_CONDITION_MODE,
	NUM_TVP_INFO_CONDITION_ZOOM_MODE,
	NUM_TVP_INFO_ENVIRONMENT_DEFAULT_SCREEN_MODE,
	NUM_TVP_INFO_ENVIRONMENT_DEFAULT_SCREEN_ASPECT_RATIO,
	NUM_TVP_INFO_ENVIRONMENT_AVAILABLE_DISPLAY_MODES,
	NUM_TVP_INFO_NOT_FOUND_SCREEN_MODE_FROM_DRIVER,
	NUM_TVP_INFO_RESULT_CANDIDATES,
	NUM_TVP_INFO_TRY_SCREEN_MODE,
	NUM_TVP_ALL_SCREEN_MODE_ERROR,
	NUM_TVP_INFO_CHANGE_SCREEN_MODE_SUCCESS,
	NUM_TVP_SELECT_XP3FILE_OR_FOLDER,
	NUM_TVP_D3D_ERR_DEVICE_LOST,
	NUM_TVP_D3D_ERR_DRIVER_IINTERNAL_ERROR,
	NUM_TVP_D3D_ERR_INVALID_CALL,
	NUM_TVP_D3D_ERR_OUT_OF_VIDEO_MEMORY,
	NUM_TVP_D3D_ERR_OUT_OF_MEMORY,
	NUM_TVP_D3D_ERR_WRONG_TEXTURE_FORMAT,
	NUM_TVP_D3D_ERR_UNSUPORTED_COLOR_OPERATION,
	NUM_TVP_D3D_ERR_UNSUPORTED_COLOR_ARG,
	NUM_TVP_D3D_ERR_UNSUPORTED_AALPHT_OPERATION,
	NUM_TVP_D3D_ERR_UNSUPORTED_ALPHA_ARG,
	NUM_TVP_D3D_ERR_TOO_MANY_OPERATIONS,
	NUM_TVP_D3D_ERR_CONFLICTIONING_TEXTURE_FILTER,
	NUM_TVP_D3D_ERR_UNSUPORTED_FACTOR_VALUE,
	NUM_TVP_D3D_ERR_CONFLICTIONING_RENDER_STATE,
	NUM_TVP_D3D_ERR_UNSUPPORTED_TEXTURE_FILTER,
	NUM_TVP_D3D_ERR_CONFLICTIONING_TEXTURE_PALETTE,
	NUM_TVP_D3D_ERR_NOT_FOUND,
	NUM_TVP_D3D_ERR_MORE_DATA,
	NUM_TVP_D3D_ERR_DEVICE_NOT_RESET,
	NUM_TVP_D3D_ERR_NOT_AVAILABLE,
	NUM_TVP_D3D_ERR_INVALID_DEVICE,
	NUM_TVP_D3D_ERR_DRIVER_INVALID_CALL,
	NUM_TVP_D3D_ERR_WAS_STILL_DRAWING,
	NUM_TVP_D3D_ERR_DEVICE_HUNG,
	NUM_TVP_D3D_ERR_UNSUPPORTED_OVERLAY,
	NUM_TVP_D3D_ERR_UNSUPPORTED_OVERLAY_FORMAT,
	NUM_TVP_D3D_ERR_CANNOT_PROTECT_CONTENT,
	NUM_TVP_D3D_ERR_UNSUPPORTED_CRYPTO,
	NUM_TVP_D3D_ERR_PRESENT_STATISTICS_DIS_JOINT,
	NUM_TVP_D3D_ERR_DEVICE_REMOVED,
	NUM_TVP_D3D_OK_NO_AUTO_GEN,
	NUM_TVP_D3D_ERR_FAIL,
	NUM_TVP_D3D_ERR_INVALID_ARG,
	NUM_TVP_D3D_UNKNOWN_ERROR,
	NUM_TVP_EXCEPTION_ACCESS_VIOLATION,
	NUM_TVP_EXCEPTION_BREAKPOINT,
	NUM_TVP_EXCEPTION_DATATYPE_MISALIGNMENT,
	NUM_TVP_EXCEPTION_SINGLE_STEP,
	NUM_TVP_EXCEPTION_ARRAY_BOUNDS_EXCEEDED,
	NUM_TVP_EXCEPTION_FLT_DENORMAL_OPERAND,
	NUM_TVP_EXCEPTION_FLT_DIVIDE_BY_ZERO,
	NUM_TVP_EXCEPTION_FLT_INEXACT_RESULT,
	NUM_TVP_EXCEPTION_FLT_INVALID_OPERATION,
	NUM_TVP_EXCEPTION_FLT_OVERFLOW,
	NUM_TVP_EXCEPTION_FLT_STACK_CHECK,
	NUM_TVP_EXCEPTION_FLT_UNDERFLOW,
	NUM_TVP_EXCEPTION_INT_DIVIDE_BY_ZERO,
	NUM_TVP_EXCEPTION_INT_OVERFLOW,
	NUM_TVP_EXCEPTION_PRIV_INSTRUCTION,
	NUM_TVP_EXCEPTION_NONCONTINUABLE_EXCEPTION,
	NUM_TVP_EXCEPTION_GUARD_PAGE,
	NUM_TVP_EXCEPTION_ILLEGAL_INSTRUCTION,
	NUM_TVP_EXCEPTION_IN_PAGE_ERROR,
	NUM_TVP_EXCEPTION_INVALID_DISPOSITION,
	NUM_TVP_EXCEPTION_INVALID_HANDLE,
	NUM_TVP_EXCEPTION_STACK_OVERFLOW,
	NUM_TVP_EXCEPTION_UNWIND_CCONSOLIDATE,
	NUM_TVP_CANNOT_SHOW_MODAL_AREADY_SHOWED,
	NUM_TVP_CANNOT_SHOW_MODAL_SINGLE_WINDOW,
	NUM_MESSAGE_MAX
};
void TVPLoadMessage( iTVPMessageResourceProvider* p ) {
	if( IS_LOAD_MESSAGE ) return;
	IS_LOAD_MESSAGE = true;

	const tjs_char* mes;
	tjs_uint length;
	TJSInternalError.AssignMessage( mes = p->GetMessage( NUM_TJS_INTERNAL_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_INTERNAL_ERROR );
	TJSWarning.AssignMessage( mes = p->GetMessage( NUM_TJS_WARNING, length ), length ); p->ReleaseMessage( mes, NUM_TJS_WARNING );
	TJSWarnEvalOperator.AssignMessage( mes = p->GetMessage( NUM_TJS_WARN_EVAL_OPERATOR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_WARN_EVAL_OPERATOR );
	TJSNarrowToWideConversionError.AssignMessage( mes = p->GetMessage( NUM_TJS_NARROW_TO_WIDE_CONVERSION_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NARROW_TO_WIDE_CONVERSION_ERROR );
	TJSVariantConvertError.AssignMessage( mes = p->GetMessage( NUM_TJS_VARIANT_CONVERT_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_VARIANT_CONVERT_ERROR );
	TJSVariantConvertErrorToObject.AssignMessage( mes = p->GetMessage( NUM_TJS_VARIANT_CONVERT_ERROR_TO_OBJECT, length ), length ); p->ReleaseMessage( mes, NUM_TJS_VARIANT_CONVERT_ERROR_TO_OBJECT );
	TJSIDExpected.AssignMessage( mes = p->GetMessage( NUM_TJS_IDEXPECTED, length ), length ); p->ReleaseMessage( mes, NUM_TJS_IDEXPECTED );
	TJSSubstitutionInBooleanContext.AssignMessage( mes = p->GetMessage( NUM_TJS_SUBSTITUTION_IN_BOOLEAN_CONTEXT, length ), length ); p->ReleaseMessage( mes, NUM_TJS_SUBSTITUTION_IN_BOOLEAN_CONTEXT );
	TJSCannotModifyLHS.AssignMessage( mes = p->GetMessage( NUM_TJS_CANNOT_MODIFY_LHS, length ), length ); p->ReleaseMessage( mes, NUM_TJS_CANNOT_MODIFY_LHS );
	TJSInsufficientMem.AssignMessage( mes = p->GetMessage( NUM_TJS_INSUFFICIENT_MEM, length ), length ); p->ReleaseMessage( mes, NUM_TJS_INSUFFICIENT_MEM );
	TJSCannotGetResult.AssignMessage( mes = p->GetMessage( NUM_TJS_CANNOT_GET_RESULT, length ), length ); p->ReleaseMessage( mes, NUM_TJS_CANNOT_GET_RESULT );
	TJSNullAccess.AssignMessage( mes = p->GetMessage( NUM_TJS_NULL_ACCESS, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NULL_ACCESS );
	TJSMemberNotFound.AssignMessage( mes = p->GetMessage( NUM_TJS_MEMBER_NOT_FOUND, length ), length ); p->ReleaseMessage( mes, NUM_TJS_MEMBER_NOT_FOUND );
	TJSMemberNotFoundNoNameGiven.AssignMessage( mes = p->GetMessage( NUM_TJS_MEMBER_NOT_FOUND_NO_NAME_GIVEN, length ), length ); p->ReleaseMessage( mes, NUM_TJS_MEMBER_NOT_FOUND_NO_NAME_GIVEN );
	TJSNotImplemented.AssignMessage( mes = p->GetMessage( NUM_TJS_NOT_IMPLEMENTED, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NOT_IMPLEMENTED );
	TJSInvalidParam.AssignMessage( mes = p->GetMessage( NUM_TJS_INVALID_PARAM, length ), length ); p->ReleaseMessage( mes, NUM_TJS_INVALID_PARAM );
	TJSBadParamCount.AssignMessage( mes = p->GetMessage( NUM_TJS_BAD_PARAM_COUNT, length ), length ); p->ReleaseMessage( mes, NUM_TJS_BAD_PARAM_COUNT );
	TJSInvalidType.AssignMessage( mes = p->GetMessage( NUM_TJS_INVALID_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TJS_INVALID_TYPE );
	TJSSpecifyDicOrArray.AssignMessage( mes = p->GetMessage( NUM_TJS_SPECIFY_DIC_OR_ARRAY, length ), length ); p->ReleaseMessage( mes, NUM_TJS_SPECIFY_DIC_OR_ARRAY );
	TJSSpecifyArray.AssignMessage( mes = p->GetMessage( NUM_TJS_SPECIFY_ARRAY, length ), length ); p->ReleaseMessage( mes, NUM_TJS_SPECIFY_ARRAY );
	TJSStringDeallocError.AssignMessage( mes = p->GetMessage( NUM_TJS_STRING_DEALLOC_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_STRING_DEALLOC_ERROR );
	TJSStringAllocError.AssignMessage( mes = p->GetMessage( NUM_TJS_STRING_ALLOC_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_STRING_ALLOC_ERROR );
	TJSMisplacedBreakContinue.AssignMessage( mes = p->GetMessage( NUM_TJS_MISPLACED_BREAK_CONTINUE, length ), length ); p->ReleaseMessage( mes, NUM_TJS_MISPLACED_BREAK_CONTINUE );
	TJSMisplacedCase.AssignMessage( mes = p->GetMessage( NUM_TJS_MISPLACED_CASE, length ), length ); p->ReleaseMessage( mes, NUM_TJS_MISPLACED_CASE );
	TJSMisplacedReturn.AssignMessage( mes = p->GetMessage( NUM_TJS_MISPLACED_RETURN, length ), length ); p->ReleaseMessage( mes, NUM_TJS_MISPLACED_RETURN );
	TJSStringParseError.AssignMessage( mes = p->GetMessage( NUM_TJS_STRING_PARSE_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_STRING_PARSE_ERROR );
	TJSNumberError.AssignMessage( mes = p->GetMessage( NUM_TJS_NUMBER_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NUMBER_ERROR );
	TJSUnclosedComment.AssignMessage( mes = p->GetMessage( NUM_TJS_UNCLOSED_COMMENT, length ), length ); p->ReleaseMessage( mes, NUM_TJS_UNCLOSED_COMMENT );
	TJSInvalidChar.AssignMessage( mes = p->GetMessage( NUM_TJS_INVALID_CHAR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_INVALID_CHAR );
	TJSExpected.AssignMessage( mes = p->GetMessage( NUM_TJS_EXPECTED, length ), length ); p->ReleaseMessage( mes, NUM_TJS_EXPECTED );
	TJSSyntaxError.AssignMessage( mes = p->GetMessage( NUM_TJS_SYNTAX_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_SYNTAX_ERROR );
	TJSPPError.AssignMessage( mes = p->GetMessage( NUM_TJS_PPERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_PPERROR );
	TJSCannotGetSuper.AssignMessage( mes = p->GetMessage( NUM_TJS_CANNOT_GET_SUPER, length ), length ); p->ReleaseMessage( mes, NUM_TJS_CANNOT_GET_SUPER );
	TJSInvalidOpecode.AssignMessage( mes = p->GetMessage( NUM_TJS_INVALID_OPECODE, length ), length ); p->ReleaseMessage( mes, NUM_TJS_INVALID_OPECODE );
	TJSRangeError.AssignMessage( mes = p->GetMessage( NUM_TJS_RANGE_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_RANGE_ERROR );
	TJSAccessDenyed.AssignMessage( mes = p->GetMessage( NUM_TJS_ACCESS_DENYED, length ), length ); p->ReleaseMessage( mes, NUM_TJS_ACCESS_DENYED );
	TJSNativeClassCrash.AssignMessage( mes = p->GetMessage( NUM_TJS_NATIVE_CLASS_CRASH, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NATIVE_CLASS_CRASH );
	TJSInvalidObject.AssignMessage( mes = p->GetMessage( NUM_TJS_INVALID_OBJECT, length ), length ); p->ReleaseMessage( mes, NUM_TJS_INVALID_OBJECT );
	TJSCannotOmit.AssignMessage( mes = p->GetMessage( NUM_TJS_CANNOT_OMIT, length ), length ); p->ReleaseMessage( mes, NUM_TJS_CANNOT_OMIT );
	TJSCannotParseDate.AssignMessage( mes = p->GetMessage( NUM_TJS_CANNOT_PARSE_DATE, length ), length ); p->ReleaseMessage( mes, NUM_TJS_CANNOT_PARSE_DATE );
	TJSInvalidValueForTimestamp.AssignMessage( mes = p->GetMessage( NUM_TJS_INVALID_VALUE_FOR_TIMESTAMP, length ), length ); p->ReleaseMessage( mes, NUM_TJS_INVALID_VALUE_FOR_TIMESTAMP );
	TJSExceptionNotFound.AssignMessage( mes = p->GetMessage( NUM_TJS_EXCEPTION_NOT_FOUND, length ), length ); p->ReleaseMessage( mes, NUM_TJS_EXCEPTION_NOT_FOUND );
	TJSInvalidFormatString.AssignMessage( mes = p->GetMessage( NUM_TJS_INVALID_FORMAT_STRING, length ), length ); p->ReleaseMessage( mes, NUM_TJS_INVALID_FORMAT_STRING );
	TJSDivideByZero.AssignMessage( mes = p->GetMessage( NUM_TJS_DIVIDE_BY_ZERO, length ), length ); p->ReleaseMessage( mes, NUM_TJS_DIVIDE_BY_ZERO );
	TJSNotReconstructiveRandomizeData.AssignMessage( mes = p->GetMessage( NUM_TJS_NOT_RECONSTRUCTIVE_RANDOMIZE_DATA, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NOT_RECONSTRUCTIVE_RANDOMIZE_DATA );
	TJSSymbol.AssignMessage( mes = p->GetMessage( NUM_TJS_SYMBOL, length ), length ); p->ReleaseMessage( mes, NUM_TJS_SYMBOL );
	TJSCallHistoryIsFromOutOfTJS2Script.AssignMessage( mes = p->GetMessage( NUM_TJS_CALL_HISTORY_IS_FROM_OUT_OF_TJS2SCRIPT, length ), length ); p->ReleaseMessage( mes, NUM_TJS_CALL_HISTORY_IS_FROM_OUT_OF_TJS2SCRIPT );
	TJSNObjectsWasNotFreed.AssignMessage( mes = p->GetMessage( NUM_TJS_NOBJECTS_WAS_NOT_FREED, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NOBJECTS_WAS_NOT_FREED );
#ifdef TJS_TEXT_OUT_CRLF
	TJSObjectCreationHistoryDelimiter.AssignMessage( mes = p->GetMessage( NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER_CRLF, length ), length ); p->ReleaseMessage( mes, NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER_CRLF );
#else
	TJSObjectCreationHistoryDelimiter.AssignMessage( mes = p->GetMessage( NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER, length ), length ); p->ReleaseMessage( mes, NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER );
#endif
#ifdef TJS_TEXT_OUT_CRLF
	TJSObjectWasNotFreed.AssignMessage( mes = p->GetMessage( NUM_TJS_OBJECT_WAS_NOT_FREED_CRLF, length ), length ); p->ReleaseMessage( mes, NUM_TJS_OBJECT_WAS_NOT_FREED_CRLF );
#else
	TJSObjectWasNotFreed.AssignMessage( mes = p->GetMessage( NUM_TJS_OBJECT_WAS_NOT_FREED, length ), length ); p->ReleaseMessage( mes, NUM_TJS_OBJECT_WAS_NOT_FREED );
#endif
	TJSGroupByObjectTypeAndHistory.AssignMessage( mes = p->GetMessage( NUM_TJS_GROUP_BY_OBJECT_TYPE_AND_HISTORY, length ), length ); p->ReleaseMessage( mes, NUM_TJS_GROUP_BY_OBJECT_TYPE_AND_HISTORY );
	TJSGroupByObjectType.AssignMessage( mes = p->GetMessage( NUM_TJS_GROUP_BY_OBJECT_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TJS_GROUP_BY_OBJECT_TYPE );
#ifdef TJS_TEXT_OUT_CRLF
	TJSObjectCountingMessageGroupByObjectTypeAndHistory.AssignMessage( mes = p->GetMessage( NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY_CRLF, length ), length ); p->ReleaseMessage( mes, NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY_CRLF );
#else
	TJSObjectCountingMessageGroupByObjectTypeAndHistory.AssignMessage( mes = p->GetMessage( NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY, length ), length ); p->ReleaseMessage( mes, NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY );
#endif
	TJSObjectCountingMessageTJSGroupByObjectType.AssignMessage( mes = p->GetMessage( NUM_TJS_OBJECT_COUNTING_MESSAGE_TJSGROUP_BY_OBJECT_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TJS_OBJECT_COUNTING_MESSAGE_TJSGROUP_BY_OBJECT_TYPE );
#ifdef TJS_TEXT_OUT_CRLF
	TJSWarnRunningCodeOnDeletingObject.AssignMessage( mes = p->GetMessage( NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT_CRLF, length ), length ); p->ReleaseMessage( mes, NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT_CRLF );
#else
	TJSWarnRunningCodeOnDeletingObject.AssignMessage( mes = p->GetMessage( NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT, length ), length ); p->ReleaseMessage( mes, NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT );
#endif
	TJSWriteError.AssignMessage( mes = p->GetMessage( NUM_TJS_WRITE_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_WRITE_ERROR );
	TJSReadError.AssignMessage( mes = p->GetMessage( NUM_TJS_READ_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_READ_ERROR );
	TJSSeekError.AssignMessage( mes = p->GetMessage( NUM_TJS_SEEK_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TJS_SEEK_ERROR );
	TJSByteCodeBroken.AssignMessage( mes = p->GetMessage( NUM_TJS_BYTE_CODE_BROKEN, length ), length ); p->ReleaseMessage( mes, NUM_TJS_BYTE_CODE_BROKEN );
	TJSObjectHashMapLogVersionMismatch.AssignMessage( mes = p->GetMessage( NUM_TJS_OBJECT_HASH_MAP_LOG_VERSION_MISMATCH, length ), length ); p->ReleaseMessage( mes, NUM_TJS_OBJECT_HASH_MAP_LOG_VERSION_MISMATCH );
	TJSCurruptedObjectHashMapLog.AssignMessage( mes = p->GetMessage( NUM_TJS_CURRUPTED_OBJECT_HASH_MAP_LOG, length ), length ); p->ReleaseMessage( mes, NUM_TJS_CURRUPTED_OBJECT_HASH_MAP_LOG );
	TJSUnknownFailure.AssignMessage( mes = p->GetMessage( NUM_TJS_UNKNOWN_FAILURE, length ), length ); p->ReleaseMessage( mes, NUM_TJS_UNKNOWN_FAILURE );
	TJSUnknownPackUnpackTemplateCharcter.AssignMessage( mes = p->GetMessage( NUM_TJS_UNKNOWN_PACK_UNPACK_TEMPLATE_CHARCTER, length ), length ); p->ReleaseMessage( mes, NUM_TJS_UNKNOWN_PACK_UNPACK_TEMPLATE_CHARCTER );
	TJSUnknownBitStringCharacter.AssignMessage( mes = p->GetMessage( NUM_TJS_UNKNOWN_BIT_STRING_CHARACTER, length ), length ); p->ReleaseMessage( mes, NUM_TJS_UNKNOWN_BIT_STRING_CHARACTER );
	TJSUnknownHexStringCharacter.AssignMessage( mes = p->GetMessage( NUM_TJS_UNKNOWN_HEX_STRING_CHARACTER, length ), length ); p->ReleaseMessage( mes, NUM_TJS_UNKNOWN_HEX_STRING_CHARACTER );
	TJSNotSupportedUuencode.AssignMessage( mes = p->GetMessage( NUM_TJS_NOT_SUPPORTED_UUENCODE, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NOT_SUPPORTED_UUENCODE );
	TJSNotSupportedBER.AssignMessage( mes = p->GetMessage( NUM_TJS_NOT_SUPPORTED_BER, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NOT_SUPPORTED_BER );
	TJSNotSupportedUnpackLP.AssignMessage( mes = p->GetMessage( NUM_TJS_NOT_SUPPORTED_UNPACK_LP, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NOT_SUPPORTED_UNPACK_LP );
	TJSNotSupportedUnpackP.AssignMessage( mes = p->GetMessage( NUM_TJS_NOT_SUPPORTED_UNPACK_P, length ), length ); p->ReleaseMessage( mes, NUM_TJS_NOT_SUPPORTED_UNPACK_P );
	TVPVersionInformation.AssignMessage( mes = p->GetMessage( NUM_TVP_VERSION_INFORMATION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_VERSION_INFORMATION );
	TVPVersionInformation2.AssignMessage( mes = p->GetMessage( NUM_TVP_VERSION_INFORMATION2, length ), length ); p->ReleaseMessage( mes, NUM_TVP_VERSION_INFORMATION2 );
	TVPDownloadPageURL.AssignMessage( mes = p->GetMessage( NUM_TVP_DOWNLOAD_PAGE_URL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_DOWNLOAD_PAGE_URL );
	TVPInternalError.AssignMessage( mes = p->GetMessage( NUM_TVP_INTERNAL_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INTERNAL_ERROR );
	TVPInvalidParam.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_PARAM, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_PARAM );
	TVPWarnDebugOptionEnabled.AssignMessage( mes = p->GetMessage( NUM_TVP_WARN_DEBUG_OPTION_ENABLED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_WARN_DEBUG_OPTION_ENABLED );
	TVPCommandLineParamIgnoredAndDefaultUsed.AssignMessage( mes = p->GetMessage( NUM_TVP_COMMAND_LINE_PARAM_IGNORED_AND_DEFAULT_USED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_COMMAND_LINE_PARAM_IGNORED_AND_DEFAULT_USED );
	TVPInvalidCommandLineParam.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_COMMAND_LINE_PARAM, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_COMMAND_LINE_PARAM );
	TVPNotImplemented.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT_IMPLEMENTED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT_IMPLEMENTED );
	TVPCannotOpenStorage.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_OPEN_STORAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_OPEN_STORAGE );
	TVPCannotFindStorage.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_FIND_STORAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_FIND_STORAGE );
	TVPCannotOpenStorageForWrite.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_OPEN_STORAGE_FOR_WRITE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_OPEN_STORAGE_FOR_WRITE );
	TVPStorageInArchiveNotFound.AssignMessage( mes = p->GetMessage( NUM_TVP_STORAGE_IN_ARCHIVE_NOT_FOUND, length ), length ); p->ReleaseMessage( mes, NUM_TVP_STORAGE_IN_ARCHIVE_NOT_FOUND );
	TVPInvalidPathName.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_PATH_NAME, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_PATH_NAME );
	TVPUnsupportedMediaName.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_MEDIA_NAME, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_MEDIA_NAME );
	TVPCannotUnbindXP3EXE.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_UNBIND_XP3EXE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_UNBIND_XP3EXE );
	TVPCannotFindXP3Mark.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_FIND_XP3MARK, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_FIND_XP3MARK );
	TVPMissingPathDelimiterAtLast.AssignMessage( mes = p->GetMessage( NUM_TVP_MISSING_PATH_DELIMITER_AT_LAST, length ), length ); p->ReleaseMessage( mes, NUM_TVP_MISSING_PATH_DELIMITER_AT_LAST );
	TVPFilenameContainsSharpWarn.AssignMessage( mes = p->GetMessage( NUM_TVP_FILENAME_CONTAINS_SHARP_WARN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FILENAME_CONTAINS_SHARP_WARN );
	TVPCannotGetLocalName.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_GET_LOCAL_NAME, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_GET_LOCAL_NAME );
	TVPReadError.AssignMessage( mes = p->GetMessage( NUM_TVP_READ_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_READ_ERROR );
	TVPWriteError.AssignMessage( mes = p->GetMessage( NUM_TVP_WRITE_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_WRITE_ERROR );
	TVPSeekError.AssignMessage( mes = p->GetMessage( NUM_TVP_SEEK_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SEEK_ERROR );
	TVPTruncateError.AssignMessage( mes = p->GetMessage( NUM_TVP_TRUNCATE_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TRUNCATE_ERROR );
	TVPInsufficientMemory.AssignMessage( mes = p->GetMessage( NUM_TVP_INSUFFICIENT_MEMORY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INSUFFICIENT_MEMORY );
	TVPUncompressionFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_UNCOMPRESSION_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNCOMPRESSION_FAILED );
	TVPCompressionFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_COMPRESSION_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_COMPRESSION_FAILED );
	TVPCannotWriteToArchive.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_WRITE_TO_ARCHIVE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_WRITE_TO_ARCHIVE );
	TVPUnsupportedCipherMode.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_CIPHER_MODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_CIPHER_MODE );
	TVPUnsupportedEncoding.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_ENCODING, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_ENCODING );
	TVPUnsupportedModeString.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_MODE_STRING, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_MODE_STRING );
	TVPUnknownGraphicFormat.AssignMessage( mes = p->GetMessage( NUM_TVP_UNKNOWN_GRAPHIC_FORMAT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNKNOWN_GRAPHIC_FORMAT );
	TVPCannotSuggestGraphicExtension.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_SUGGEST_GRAPHIC_EXTENSION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_SUGGEST_GRAPHIC_EXTENSION );
	TVPMaskSizeMismatch.AssignMessage( mes = p->GetMessage( NUM_TVP_MASK_SIZE_MISMATCH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_MASK_SIZE_MISMATCH );
	TVPProvinceSizeMismatch.AssignMessage( mes = p->GetMessage( NUM_TVP_PROVINCE_SIZE_MISMATCH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_PROVINCE_SIZE_MISMATCH );
	TVPImageLoadError.AssignMessage( mes = p->GetMessage( NUM_TVP_IMAGE_LOAD_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_IMAGE_LOAD_ERROR );
	TVPJPEGLoadError.AssignMessage( mes = p->GetMessage( NUM_TVP_JPEGLOAD_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_JPEGLOAD_ERROR );
	TVPPNGLoadError.AssignMessage( mes = p->GetMessage( NUM_TVP_PNGLOAD_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_PNGLOAD_ERROR );
	TVPERILoadError.AssignMessage( mes = p->GetMessage( NUM_TVP_ERILOAD_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ERILOAD_ERROR );
	TVPTLGLoadError.AssignMessage( mes = p->GetMessage( NUM_TVP_TLGLOAD_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TLGLOAD_ERROR );
	TVPInvalidImageSaveType.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_IMAGE_SAVE_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_IMAGE_SAVE_TYPE );
	TVPInvalidOperationFor8BPP.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_OPERATION_FOR8BPP, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_OPERATION_FOR8BPP );
	TVPInvalidOperationFor32BPP.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_OPERATION_FOR32BPP, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_OPERATION_FOR32BPP );
	TVPSpecifyWindow.AssignMessage( mes = p->GetMessage( NUM_TVP_SPECIFY_WINDOW, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SPECIFY_WINDOW );
	TVPSpecifyLayer.AssignMessage( mes = p->GetMessage( NUM_TVP_SPECIFY_LAYER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SPECIFY_LAYER );
	TVPSpecifyLayerOrBitmap.AssignMessage( mes = p->GetMessage( NUM_TVP_SPECIFY_LAYER_OR_BITMAP, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SPECIFY_LAYER_OR_BITMAP );
	TVPCannotAcceptModeAuto.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_ACCEPT_MODE_AUTO, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_ACCEPT_MODE_AUTO );
	TVPCannotCreateEmptyLayerImage.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_CREATE_EMPTY_LAYER_IMAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_CREATE_EMPTY_LAYER_IMAGE );
	TVPCannotSetPrimaryInvisible.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_SET_PRIMARY_INVISIBLE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_SET_PRIMARY_INVISIBLE );
	TVPCannotMovePrimary.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_MOVE_PRIMARY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_MOVE_PRIMARY );
	TVPCannotSetParentSelf.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_SET_PARENT_SELF, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_SET_PARENT_SELF );
	TVPCannotMoveNextToSelfOrNotSiblings.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_MOVE_NEXT_TO_SELF_OR_NOT_SIBLINGS, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_MOVE_NEXT_TO_SELF_OR_NOT_SIBLINGS );
	TVPCannotMovePrimaryOrSiblingless.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_MOVE_PRIMARY_OR_SIBLINGLESS, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_MOVE_PRIMARY_OR_SIBLINGLESS );
	TVPCannotMoveToUnderOtherPrimaryLayer.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_MOVE_TO_UNDER_OTHER_PRIMARY_LAYER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_MOVE_TO_UNDER_OTHER_PRIMARY_LAYER );
	TVPInvalidImagePosition.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_IMAGE_POSITION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_IMAGE_POSITION );
	TVPCannotSetModeToDisabledOrModal.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_SET_MODE_TO_DISABLED_OR_MODAL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_SET_MODE_TO_DISABLED_OR_MODAL );
	TVPNotDrawableLayerType.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT_DRAWABLE_LAYER_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT_DRAWABLE_LAYER_TYPE );
	TVPSourceLayerHasNoImage.AssignMessage( mes = p->GetMessage( NUM_TVP_SOURCE_LAYER_HAS_NO_IMAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SOURCE_LAYER_HAS_NO_IMAGE );
	TVPUnsupportedLayerType.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_LAYER_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_LAYER_TYPE );
	TVPNotDrawableFaceType.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT_DRAWABLE_FACE_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT_DRAWABLE_FACE_TYPE );
	TVPCannotConvertLayerTypeUsingGivenDirection.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_CONVERT_LAYER_TYPE_USING_GIVEN_DIRECTION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_CONVERT_LAYER_TYPE_USING_GIVEN_DIRECTION );
	TVPNegativeOpacityNotSupportedOnThisFace.AssignMessage( mes = p->GetMessage( NUM_TVP_NEGATIVE_OPACITY_NOT_SUPPORTED_ON_THIS_FACE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NEGATIVE_OPACITY_NOT_SUPPORTED_ON_THIS_FACE );
	TVPSrcRectOutOfBitmap.AssignMessage( mes = p->GetMessage( NUM_TVP_SRC_RECT_OUT_OF_BITMAP, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SRC_RECT_OUT_OF_BITMAP );
	TVPBoxBlurAreaMustContainCenterPixel.AssignMessage( mes = p->GetMessage( NUM_TVP_BOX_BLUR_AREA_MUST_CONTAIN_CENTER_PIXEL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BOX_BLUR_AREA_MUST_CONTAIN_CENTER_PIXEL );
	TVPBoxBlurAreaMustBeSmallerThan16Million.AssignMessage( mes = p->GetMessage( NUM_TVP_BOX_BLUR_AREA_MUST_BE_SMALLER_THAN16MILLION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BOX_BLUR_AREA_MUST_BE_SMALLER_THAN16MILLION );
	TVPCannotChangeFocusInProcessingFocus.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_CHANGE_FOCUS_IN_PROCESSING_FOCUS, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_CHANGE_FOCUS_IN_PROCESSING_FOCUS );
	TVPWindowHasNoLayer.AssignMessage( mes = p->GetMessage( NUM_TVP_WINDOW_HAS_NO_LAYER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_WINDOW_HAS_NO_LAYER );
	TVPWindowHasAlreadyPrimaryLayer.AssignMessage( mes = p->GetMessage( NUM_TVP_WINDOW_HAS_ALREADY_PRIMARY_LAYER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_WINDOW_HAS_ALREADY_PRIMARY_LAYER );
	TVPSpecifiedEventNeedsParameter.AssignMessage( mes = p->GetMessage( NUM_TVP_SPECIFIED_EVENT_NEEDS_PARAMETER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SPECIFIED_EVENT_NEEDS_PARAMETER );
	TVPSpecifiedEventNeedsParameter2.AssignMessage( mes = p->GetMessage( NUM_TVP_SPECIFIED_EVENT_NEEDS_PARAMETER2, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SPECIFIED_EVENT_NEEDS_PARAMETER2 );
	TVPSpecifiedEventNameIsUnknown.AssignMessage( mes = p->GetMessage( NUM_TVP_SPECIFIED_EVENT_NAME_IS_UNKNOWN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SPECIFIED_EVENT_NAME_IS_UNKNOWN );
	TVPOutOfRectangle.AssignMessage( mes = p->GetMessage( NUM_TVP_OUT_OF_RECTANGLE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_OUT_OF_RECTANGLE );
	TVPInvalidMethodInUpdating.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_METHOD_IN_UPDATING, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_METHOD_IN_UPDATING );
	TVPCannotCreateInstance.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_CREATE_INSTANCE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_CREATE_INSTANCE );
	TVPUnknownWaveFormat.AssignMessage( mes = p->GetMessage( NUM_TVP_UNKNOWN_WAVE_FORMAT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNKNOWN_WAVE_FORMAT );
	TVPCurrentTransitionMustBeStopping.AssignMessage( mes = p->GetMessage( NUM_TVP_CURRENT_TRANSITION_MUST_BE_STOPPING, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CURRENT_TRANSITION_MUST_BE_STOPPING );
	TVPTransHandlerError.AssignMessage( mes = p->GetMessage( NUM_TVP_TRANS_HANDLER_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TRANS_HANDLER_ERROR );
	TVPTransAlreadyRegistered.AssignMessage( mes = p->GetMessage( NUM_TVP_TRANS_ALREADY_REGISTERED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TRANS_ALREADY_REGISTERED );
	TVPCannotFindTransHander.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_FIND_TRANS_HANDER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_FIND_TRANS_HANDER );
	TVPSpecifyTransitionSource.AssignMessage( mes = p->GetMessage( NUM_TVP_SPECIFY_TRANSITION_SOURCE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SPECIFY_TRANSITION_SOURCE );
	TVPLayerCannotHaveImage.AssignMessage( mes = p->GetMessage( NUM_TVP_LAYER_CANNOT_HAVE_IMAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_LAYER_CANNOT_HAVE_IMAGE );
	TVPTransitionSourceAndDestinationMustHaveImage.AssignMessage( mes = p->GetMessage( NUM_TVP_TRANSITION_SOURCE_AND_DESTINATION_MUST_HAVE_IMAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TRANSITION_SOURCE_AND_DESTINATION_MUST_HAVE_IMAGE );
	TVPCannotLoadRuleGraphic.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_LOAD_RULE_GRAPHIC, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_LOAD_RULE_GRAPHIC );
	TVPSpecifyOption.AssignMessage( mes = p->GetMessage( NUM_TVP_SPECIFY_OPTION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SPECIFY_OPTION );
	TVPTransitionLayerSizeMismatch.AssignMessage( mes = p->GetMessage( NUM_TVP_TRANSITION_LAYER_SIZE_MISMATCH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TRANSITION_LAYER_SIZE_MISMATCH );
	TVPTransitionMutualSource.AssignMessage( mes = p->GetMessage( NUM_TVP_TRANSITION_MUTUAL_SOURCE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TRANSITION_MUTUAL_SOURCE );
	TVPHoldDestinationAlphaParameterIsNowDeprecated.AssignMessage( mes = p->GetMessage( NUM_TVP_HOLD_DESTINATION_ALPHA_PARAMETER_IS_NOW_DEPRECATED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_HOLD_DESTINATION_ALPHA_PARAMETER_IS_NOW_DEPRECATED );
	TVPCannotConnectMultipleWaveSoundBufferAtOnce.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_CONNECT_MULTIPLE_WAVE_SOUND_BUFFER_AT_ONCE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_CONNECT_MULTIPLE_WAVE_SOUND_BUFFER_AT_ONCE );
	TVPInvalidWindowSizeMustBeIn64to32768.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_WINDOW_SIZE_MUST_BE_IN64TO32768, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_WINDOW_SIZE_MUST_BE_IN64TO32768 );
	TVPInvalidOverlapCountMustBeIn2to32.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_OVERLAP_COUNT_MUST_BE_IN2TO32, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_OVERLAP_COUNT_MUST_BE_IN2TO32 );
	TVPCurrentlyAsyncLoadBitmap.AssignMessage( mes = p->GetMessage( NUM_TVP_CURRENTLY_ASYNC_LOAD_BITMAP, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CURRENTLY_ASYNC_LOAD_BITMAP );
	TVPFaildClipboardCopy.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILD_CLIPBOARD_COPY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILD_CLIPBOARD_COPY );
	TVPInvalidUTF16ToUTF8.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_UTF16TO_UTF8, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_UTF16TO_UTF8 );
	TVPInfoLoadingStartupScript.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_LOADING_STARTUP_SCRIPT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_LOADING_STARTUP_SCRIPT );
	TVPInfoStartupScriptEnded.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_STARTUP_SCRIPT_ENDED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_STARTUP_SCRIPT_ENDED );
	TVPTjsCharMustBeTwoOrFour.AssignMessage( mes = p->GetMessage( NUM_TVP_TJS_CHAR_MUST_BE_TWO_OR_FOUR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TJS_CHAR_MUST_BE_TWO_OR_FOUR );
	TVPMediaNameHadAlreadyBeenRegistered.AssignMessage( mes = p->GetMessage( NUM_TVP_MEDIA_NAME_HAD_ALREADY_BEEN_REGISTERED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_MEDIA_NAME_HAD_ALREADY_BEEN_REGISTERED );
	TVPMediaNameIsNotRegistered.AssignMessage( mes = p->GetMessage( NUM_TVP_MEDIA_NAME_IS_NOT_REGISTERED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_MEDIA_NAME_IS_NOT_REGISTERED );
	TVPInfoRebuildingAutoPath.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_REBUILDING_AUTO_PATH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_REBUILDING_AUTO_PATH );
	TVPInfoTotalFileFoundAndActivated.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_TOTAL_FILE_FOUND_AND_ACTIVATED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_TOTAL_FILE_FOUND_AND_ACTIVATED );
	TVPErrorInRetrievingSystemOnActivateOnDeactivate.AssignMessage( mes = p->GetMessage( NUM_TVP_ERROR_IN_RETRIEVING_SYSTEM_ON_ACTIVATE_ON_DEACTIVATE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ERROR_IN_RETRIEVING_SYSTEM_ON_ACTIVATE_ON_DEACTIVATE );
	TVPTheHostIsNotA16BitUnicodeSystem.AssignMessage( mes = p->GetMessage( NUM_TVP_THE_HOST_IS_NOT_A16BIT_UNICODE_SYSTEM, length ), length ); p->ReleaseMessage( mes, NUM_TVP_THE_HOST_IS_NOT_A16BIT_UNICODE_SYSTEM );
	TVPInfoTryingToReadXp3VirtualFileSystemInformationFrom.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_TRYING_TO_READ_XP3VIRTUAL_FILE_SYSTEM_INFORMATION_FROM, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_TRYING_TO_READ_XP3VIRTUAL_FILE_SYSTEM_INFORMATION_FROM );
	TVPSpecifiedStorageHadBeenProtected.AssignMessage( mes = p->GetMessage( NUM_TVP_SPECIFIED_STORAGE_HAD_BEEN_PROTECTED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SPECIFIED_STORAGE_HAD_BEEN_PROTECTED );
	TVPInfoFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_FAILED );
	TVPInfoDoneWithContains.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_DONE_WITH_CONTAINS, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_DONE_WITH_CONTAINS );
	TVPSeparatorCRLF.AssignMessage( mes = p->GetMessage( NUM_TVP_SEPARATOR_CRLF, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SEPARATOR_CRLF );
	TVPSeparatorCR.AssignMessage( mes = p->GetMessage( NUM_TVP_SEPARATOR_CR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SEPARATOR_CR );
	TVPDefaultFontName.AssignMessage( mes = p->GetMessage( NUM_TVP_DEFAULT_FONT_NAME, length ), length ); p->ReleaseMessage( mes, NUM_TVP_DEFAULT_FONT_NAME );
	TVPCannotOpenFontFile.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_OPEN_FONT_FILE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_OPEN_FONT_FILE );
	TVPFontCannotBeUsed.AssignMessage( mes = p->GetMessage( NUM_TVP_FONT_CANNOT_BE_USED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FONT_CANNOT_BE_USED );
	TVPFontRasterizeError.AssignMessage( mes = p->GetMessage( NUM_TVP_FONT_RASTERIZE_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FONT_RASTERIZE_ERROR );
	TVPBitFieldsNotSupported.AssignMessage( mes = p->GetMessage( NUM_TVP_BIT_FIELDS_NOT_SUPPORTED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BIT_FIELDS_NOT_SUPPORTED );
	TVPCompressedBmpNotSupported.AssignMessage( mes = p->GetMessage( NUM_TVP_COMPRESSED_BMP_NOT_SUPPORTED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_COMPRESSED_BMP_NOT_SUPPORTED );
	TVPUnsupportedColorModeForPalettImage.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_COLOR_MODE_FOR_PALETT_IMAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_COLOR_MODE_FOR_PALETT_IMAGE );
	TVPNotWindowsBmp.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT_WINDOWS_BMP, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT_WINDOWS_BMP );
	TVPUnsupportedHeaderVersion.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_HEADER_VERSION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_HEADER_VERSION );
	TVPInfoTouching.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_TOUCHING, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_TOUCHING );
	TVPAbortedTimeOut.AssignMessage( mes = p->GetMessage( NUM_TVP_ABORTED_TIME_OUT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ABORTED_TIME_OUT );
	TVPAbortedLimitByte.AssignMessage( mes = p->GetMessage( NUM_TVP_ABORTED_LIMIT_BYTE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ABORTED_LIMIT_BYTE );
	TVPFaildGlyphForDrawGlyph.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILD_GLYPH_FOR_DRAW_GLYPH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILD_GLYPH_FOR_DRAW_GLYPH );
	TVPLayerObjectIsNotProperlyConstructed.AssignMessage( mes = p->GetMessage( NUM_TVP_LAYER_OBJECT_IS_NOT_PROPERLY_CONSTRUCTED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_LAYER_OBJECT_IS_NOT_PROPERLY_CONSTRUCTED );
	TVPUnknownUpdateType.AssignMessage( mes = p->GetMessage( NUM_TVP_UNKNOWN_UPDATE_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNKNOWN_UPDATE_TYPE );
	TVPUnknownTransitionType.AssignMessage( mes = p->GetMessage( NUM_TVP_UNKNOWN_TRANSITION_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNKNOWN_TRANSITION_TYPE );
	TVPUnsupportedUpdateTypeTutGiveUpdate.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_UPDATE_TYPE_TUT_GIVE_UPDATE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_UPDATE_TYPE_TUT_GIVE_UPDATE );
	TVPErrorCode.AssignMessage( mes = p->GetMessage( NUM_TVP_ERROR_CODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ERROR_CODE );
	TVPUnsupportedJpegPalette.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_JPEG_PALETTE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_JPEG_PALETTE );
	TVPLibpngError.AssignMessage( mes = p->GetMessage( NUM_TVP_LIBPNG_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_LIBPNG_ERROR );
	TVPUnsupportedColorTypePalette.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_COLOR_TYPE_PALETTE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_COLOR_TYPE_PALETTE );
	TVPUnsupportedColorType.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_COLOR_TYPE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_COLOR_TYPE );
	TVPTooLargeImage.AssignMessage( mes = p->GetMessage( NUM_TVP_TOO_LARGE_IMAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TOO_LARGE_IMAGE );
	TVPPngSaveError.AssignMessage( mes = p->GetMessage( NUM_TVP_PNG_SAVE_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_PNG_SAVE_ERROR );
	TVPTlgUnsupportedUniversalTransitionRule.AssignMessage( mes = p->GetMessage( NUM_TVP_TLG_UNSUPPORTED_UNIVERSAL_TRANSITION_RULE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TLG_UNSUPPORTED_UNIVERSAL_TRANSITION_RULE );
	TVPUnsupportedColorCount.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_COLOR_COUNT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_COLOR_COUNT );
	TVPDataFlagMustBeZero.AssignMessage( mes = p->GetMessage( NUM_TVP_DATA_FLAG_MUST_BE_ZERO, length ), length ); p->ReleaseMessage( mes, NUM_TVP_DATA_FLAG_MUST_BE_ZERO );
	TVPUnsupportedColorTypeColon.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_COLOR_TYPE_COLON, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_COLOR_TYPE_COLON );
	TVPUnsupportedExternalGolombBitLengthTable.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_EXTERNAL_GOLOMB_BIT_LENGTH_TABLE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_EXTERNAL_GOLOMB_BIT_LENGTH_TABLE );
	TVPUnsupportedEntropyCodingMethod.AssignMessage( mes = p->GetMessage( NUM_TVP_UNSUPPORTED_ENTROPY_CODING_METHOD, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNSUPPORTED_ENTROPY_CODING_METHOD );
	TVPInvalidTlgHeaderOrVersion.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_TLG_HEADER_OR_VERSION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_TLG_HEADER_OR_VERSION );
	TVPTlgMalformedTagMissionColonAfterNameLength.AssignMessage( mes = p->GetMessage( NUM_TVP_TLG_MALFORMED_TAG_MISSION_COLON_AFTER_NAME_LENGTH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TLG_MALFORMED_TAG_MISSION_COLON_AFTER_NAME_LENGTH );
	TVPTlgMalformedTagMissionEqualsAfterName.AssignMessage( mes = p->GetMessage( NUM_TVP_TLG_MALFORMED_TAG_MISSION_EQUALS_AFTER_NAME, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TLG_MALFORMED_TAG_MISSION_EQUALS_AFTER_NAME );
	TVPTlgMalformedTagMissionColonAfterVaueLength.AssignMessage( mes = p->GetMessage( NUM_TVP_TLG_MALFORMED_TAG_MISSION_COLON_AFTER_VAUE_LENGTH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TLG_MALFORMED_TAG_MISSION_COLON_AFTER_VAUE_LENGTH );
	TVPTlgMalformedTagMissionCommaAfterTag.AssignMessage( mes = p->GetMessage( NUM_TVP_TLG_MALFORMED_TAG_MISSION_COMMA_AFTER_TAG, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TLG_MALFORMED_TAG_MISSION_COMMA_AFTER_TAG );
	TVPFileSizeIsZero.AssignMessage( mes = p->GetMessage( NUM_TVP_FILE_SIZE_IS_ZERO, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FILE_SIZE_IS_ZERO );
	TVPMemoryAllocationError.AssignMessage( mes = p->GetMessage( NUM_TVP_MEMORY_ALLOCATION_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_MEMORY_ALLOCATION_ERROR );
	TVPFileReadError.AssignMessage( mes = p->GetMessage( NUM_TVP_FILE_READ_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FILE_READ_ERROR );
	TVPInvalidPrerenderedFontFile.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_PRERENDERED_FONT_FILE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_PRERENDERED_FONT_FILE );
	TVPNot16BitUnicodeFontFile.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT16BIT_UNICODE_FONT_FILE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT16BIT_UNICODE_FONT_FILE );
	TVPInvalidHeaderVersion.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_HEADER_VERSION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_HEADER_VERSION );
	TVPTlgInsufficientMemory.AssignMessage( mes = p->GetMessage( NUM_TVP_TLG_INSUFFICIENT_MEMORY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TLG_INSUFFICIENT_MEMORY );
	TVPTlgTooLargeBitLength.AssignMessage( mes = p->GetMessage( NUM_TVP_TLG_TOO_LARGE_BIT_LENGTH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TLG_TOO_LARGE_BIT_LENGTH );
	TVPCannotRetriveInterfaceFromDrawDevice.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_RETRIVE_INTERFACE_FROM_DRAW_DEVICE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_RETRIVE_INTERFACE_FROM_DRAW_DEVICE );
	TVPIllegalCharacterConversionUTF16toUTF8.AssignMessage( mes = p->GetMessage( NUM_TVP_ILLEGAL_CHARACTER_CONVERSION_UTF16TO_UTF8, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ILLEGAL_CHARACTER_CONVERSION_UTF16TO_UTF8 );
	TVPRequireLayerTreeOwnerInterfaceInterface.AssignMessage( mes = p->GetMessage( NUM_TVP_REQUIRE_LAYER_TREE_OWNER_INTERFACE_INTERFACE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_REQUIRE_LAYER_TREE_OWNER_INTERFACE_INTERFACE );
	TVPScriptExceptionRaised.AssignMessage( mes = p->GetMessage( NUM_TVP_SCRIPT_EXCEPTION_RAISED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SCRIPT_EXCEPTION_RAISED );
	TVPHardwareExceptionRaised.AssignMessage( mes = p->GetMessage( NUM_TVP_HARDWARE_EXCEPTION_RAISED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_HARDWARE_EXCEPTION_RAISED );
	TVPMainCDPName.AssignMessage( mes = p->GetMessage( NUM_TVP_MAIN_CDPNAME, length ), length ); p->ReleaseMessage( mes, NUM_TVP_MAIN_CDPNAME );
	TVPExceptionCDPName.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_CDPNAME, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_CDPNAME );
	TVPCannnotLocateUIDLLForFolderSelection.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNNOT_LOCATE_UIDLLFOR_FOLDER_SELECTION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNNOT_LOCATE_UIDLLFOR_FOLDER_SELECTION );
	TVPInvalidUIDLL.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_UIDLL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_UIDLL );
	TVPInvalidBPP.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_BPP, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_BPP );
	TVPCannotLoadPlugin.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_LOAD_PLUGIN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_LOAD_PLUGIN );
	TVPNotValidPlugin.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT_VALID_PLUGIN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT_VALID_PLUGIN );
	TVPPluginUninitFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_PLUGIN_UNINIT_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_PLUGIN_UNINIT_FAILED );
	TVPCannnotLinkPluginWhilePluginLinking.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNNOT_LINK_PLUGIN_WHILE_PLUGIN_LINKING, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNNOT_LINK_PLUGIN_WHILE_PLUGIN_LINKING );
	TVPNotSusiePlugin.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT_SUSIE_PLUGIN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT_SUSIE_PLUGIN );
	TVPSusiePluginError.AssignMessage( mes = p->GetMessage( NUM_TVP_SUSIE_PLUGIN_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SUSIE_PLUGIN_ERROR );
	TVPCannotReleasePlugin.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_RELEASE_PLUGIN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_RELEASE_PLUGIN );
	TVPNotLoadedPlugin.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT_LOADED_PLUGIN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT_LOADED_PLUGIN );
	TVPCannotAllocateBitmapBits.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_ALLOCATE_BITMAP_BITS, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_ALLOCATE_BITMAP_BITS );
	TVPScanLineRangeOver.AssignMessage( mes = p->GetMessage( NUM_TVP_SCAN_LINE_RANGE_OVER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SCAN_LINE_RANGE_OVER );
	TVPPluginError.AssignMessage( mes = p->GetMessage( NUM_TVP_PLUGIN_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_PLUGIN_ERROR );
	TVPInvalidCDDADrive.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_CDDADRIVE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_CDDADRIVE );
	TVPCDDADriveNotFound.AssignMessage( mes = p->GetMessage( NUM_TVP_CDDADRIVE_NOT_FOUND, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CDDADRIVE_NOT_FOUND );
	TVPMCIError.AssignMessage( mes = p->GetMessage( NUM_TVP_MCIERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_MCIERROR );
	TVPInvalidSMF.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_SMF, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_SMF );
	TVPMalformedMIDIMessage.AssignMessage( mes = p->GetMessage( NUM_TVP_MALFORMED_MIDIMESSAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_MALFORMED_MIDIMESSAGE );
	TVPCannotInitDirectSound.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_INIT_DIRECT_SOUND, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_INIT_DIRECT_SOUND );
	TVPCannotCreateDSSecondaryBuffer.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_CREATE_DSSECONDARY_BUFFER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_CREATE_DSSECONDARY_BUFFER );
	TVPInvalidLoopInformation.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_LOOP_INFORMATION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_LOOP_INFORMATION );
	TVPNotChildMenuItem.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT_CHILD_MENU_ITEM, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT_CHILD_MENU_ITEM );
	TVPCannotInitDirect3D.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_INIT_DIRECT3D, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_INIT_DIRECT3D );
	TVPCannotFindDisplayMode.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_FIND_DISPLAY_MODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_FIND_DISPLAY_MODE );
	TVPCannotSwitchToFullScreen.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_SWITCH_TO_FULL_SCREEN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_SWITCH_TO_FULL_SCREEN );
	TVPInvalidPropertyInFullScreen.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_PROPERTY_IN_FULL_SCREEN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_PROPERTY_IN_FULL_SCREEN );
	TVPInvalidMethodInFullScreen.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_METHOD_IN_FULL_SCREEN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_METHOD_IN_FULL_SCREEN );
	TVPCannotLoadCursor.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_LOAD_CURSOR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_LOAD_CURSOR );
	TVPCannotLoadKrMovieDLL.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_LOAD_KR_MOVIE_DLL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_LOAD_KR_MOVIE_DLL );
	TVPInvalidKrMovieDLL.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_KR_MOVIE_DLL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_KR_MOVIE_DLL );
	TVPErrorInKrMovieDLL.AssignMessage( mes = p->GetMessage( NUM_TVP_ERROR_IN_KR_MOVIE_DLL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ERROR_IN_KR_MOVIE_DLL );
	TVPWindowAlreadyMissing.AssignMessage( mes = p->GetMessage( NUM_TVP_WINDOW_ALREADY_MISSING, length ), length ); p->ReleaseMessage( mes, NUM_TVP_WINDOW_ALREADY_MISSING );
	TVPPrerenderedFontMappingFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_PRERENDERED_FONT_MAPPING_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_PRERENDERED_FONT_MAPPING_FAILED );
	TVPConfigFailOriginalFileCannotBeRewritten.AssignMessage( mes = p->GetMessage( NUM_TVP_CONFIG_FAIL_ORIGINAL_FILE_CANNOT_BE_REWRITTEN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CONFIG_FAIL_ORIGINAL_FILE_CANNOT_BE_REWRITTEN );
	TVPConfigFailTempExeNotErased.AssignMessage( mes = p->GetMessage( NUM_TVP_CONFIG_FAIL_TEMP_EXE_NOT_ERASED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CONFIG_FAIL_TEMP_EXE_NOT_ERASED );
	TVPExecutionFail.AssignMessage( mes = p->GetMessage( NUM_TVP_EXECUTION_FAIL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXECUTION_FAIL );
	TVPPluginUnboundFunctionError.AssignMessage( mes = p->GetMessage( NUM_TVP_PLUGIN_UNBOUND_FUNCTION_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_PLUGIN_UNBOUND_FUNCTION_ERROR );
	TVPExceptionHadBeenOccured.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_HAD_BEEN_OCCURED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_HAD_BEEN_OCCURED );
	TVPConsoleResult.AssignMessage( mes = p->GetMessage( NUM_TVP_CONSOLE_RESULT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CONSOLE_RESULT );
	TVPInfoListingFiles.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_LISTING_FILES, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_LISTING_FILES );
	TVPInfoTotalPhysicalMemory.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_TOTAL_PHYSICAL_MEMORY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_TOTAL_PHYSICAL_MEMORY );
	TVPInfoSelectedProjectDirectory.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_SELECTED_PROJECT_DIRECTORY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_SELECTED_PROJECT_DIRECTORY );
	TVPTooSmallExecutableSize.AssignMessage( mes = p->GetMessage( NUM_TVP_TOO_SMALL_EXECUTABLE_SIZE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TOO_SMALL_EXECUTABLE_SIZE );
	TVPInfoLoadingExecutableEmbeddedOptionsFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_LOADING_EXECUTABLE_EMBEDDED_OPTIONS_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_LOADING_EXECUTABLE_EMBEDDED_OPTIONS_FAILED );
	TVPInfoLoadingExecutableEmbeddedOptionsSucceeded.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_LOADING_EXECUTABLE_EMBEDDED_OPTIONS_SUCCEEDED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_LOADING_EXECUTABLE_EMBEDDED_OPTIONS_SUCCEEDED );
	TVPFileNotFound.AssignMessage( mes = p->GetMessage( NUM_TVP_FILE_NOT_FOUND, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FILE_NOT_FOUND );
	TVPInfoLoadingConfigurationFileFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_LOADING_CONFIGURATION_FILE_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_LOADING_CONFIGURATION_FILE_FAILED );
	TVPInfoLoadingConfigurationFileSucceeded.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_LOADING_CONFIGURATION_FILE_SUCCEEDED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_LOADING_CONFIGURATION_FILE_SUCCEEDED );
	TVPInfoDataPathDoesNotExistTryingToMakeIt.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_DATA_PATH_DOES_NOT_EXIST_TRYING_TO_MAKE_IT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_DATA_PATH_DOES_NOT_EXIST_TRYING_TO_MAKE_IT );
	TVPOk.AssignMessage( mes = p->GetMessage( NUM_TVP_OK, length ), length ); p->ReleaseMessage( mes, NUM_TVP_OK );
	TVPFaild.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILD, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILD );
	TVPInfoDataPath.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_DATA_PATH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_DATA_PATH );
	TVPInfoSpecifiedOptionEarlierItemHasMorePriority.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_SPECIFIED_OPTION_EARLIER_ITEM_HAS_MORE_PRIORITY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_SPECIFIED_OPTION_EARLIER_ITEM_HAS_MORE_PRIORITY );
	TVPNone.AssignMessage( mes = p->GetMessage( NUM_TVP_NONE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NONE );
	TVPInfoCpuClockRoughly.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_CPU_CLOCK_ROUGHLY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_CPU_CLOCK_ROUGHLY );
	TVPProgramStartedOn.AssignMessage( mes = p->GetMessage( NUM_TVP_PROGRAM_STARTED_ON, length ), length ); p->ReleaseMessage( mes, NUM_TVP_PROGRAM_STARTED_ON );
	TVPKirikiri.AssignMessage( mes = p->GetMessage( NUM_TVP_KIRIKIRI, length ), length ); p->ReleaseMessage( mes, NUM_TVP_KIRIKIRI );
	TVPUnknownError.AssignMessage( mes = p->GetMessage( NUM_TVP_UNKNOWN_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_UNKNOWN_ERROR );
	TVPExitCode.AssignMessage( mes = p->GetMessage( NUM_TVP_EXIT_CODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXIT_CODE );
	TVPFatalError.AssignMessage( mes = p->GetMessage( NUM_TVP_FATAL_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FATAL_ERROR );
	TVPEnableDigitizer.AssignMessage( mes = p->GetMessage( NUM_TVP_ENABLE_DIGITIZER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ENABLE_DIGITIZER );
	TVPTouchIntegratedTouch.AssignMessage( mes = p->GetMessage( NUM_TVP_TOUCH_INTEGRATED_TOUCH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TOUCH_INTEGRATED_TOUCH );
	TVPTouchExternalTouch.AssignMessage( mes = p->GetMessage( NUM_TVP_TOUCH_EXTERNAL_TOUCH, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TOUCH_EXTERNAL_TOUCH );
	TVPTouchIntegratedPen.AssignMessage( mes = p->GetMessage( NUM_TVP_TOUCH_INTEGRATED_PEN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TOUCH_INTEGRATED_PEN );
	TVPTouchExternalPen.AssignMessage( mes = p->GetMessage( NUM_TVP_TOUCH_EXTERNAL_PEN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TOUCH_EXTERNAL_PEN );
	TVPTouchMultiInput.AssignMessage( mes = p->GetMessage( NUM_TVP_TOUCH_MULTI_INPUT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TOUCH_MULTI_INPUT );
	TVPTouchReady.AssignMessage( mes = p->GetMessage( NUM_TVP_TOUCH_READY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_TOUCH_READY );
	TVPCpuCheckFailure.AssignMessage( mes = p->GetMessage( NUM_TVP_CPU_CHECK_FAILURE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CPU_CHECK_FAILURE );
	TVPCpuCheckFailureCpuFamilyOrLesserIsNotSupported.AssignMessage( mes = p->GetMessage( NUM_TVP_CPU_CHECK_FAILURE_CPU_FAMILY_OR_LESSER_IS_NOT_SUPPORTED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CPU_CHECK_FAILURE_CPU_FAMILY_OR_LESSER_IS_NOT_SUPPORTED );
	TVPInfoCpuNumber.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_CPU_NUMBER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_CPU_NUMBER );
	TVPCpuCheckFailureNotSupprtedCpu.AssignMessage( mes = p->GetMessage( NUM_TVP_CPU_CHECK_FAILURE_NOT_SUPPRTED_CPU, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CPU_CHECK_FAILURE_NOT_SUPPRTED_CPU );
	TVPInfoFinallyDetectedCpuFeatures.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_FINALLY_DETECTED_CPU_FEATURES, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_FINALLY_DETECTED_CPU_FEATURES );
	TVPCpuCheckFailureNotSupportedCpu.AssignMessage( mes = p->GetMessage( NUM_TVP_CPU_CHECK_FAILURE_NOT_SUPPORTED_CPU, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CPU_CHECK_FAILURE_NOT_SUPPORTED_CPU );
	TVPInfoCpuClock.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_CPU_CLOCK, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_CPU_CLOCK );
	TVPLayerBitmapBufferUnderrunDetectedCheckYourDrawingCode.AssignMessage( mes = p->GetMessage( NUM_TVP_LAYER_BITMAP_BUFFER_UNDERRUN_DETECTED_CHECK_YOUR_DRAWING_CODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_LAYER_BITMAP_BUFFER_UNDERRUN_DETECTED_CHECK_YOUR_DRAWING_CODE );
	TVPLayerBitmapBufferOverrunDetectedCheckYourDrawingCode.AssignMessage( mes = p->GetMessage( NUM_TVP_LAYER_BITMAP_BUFFER_OVERRUN_DETECTED_CHECK_YOUR_DRAWING_CODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_LAYER_BITMAP_BUFFER_OVERRUN_DETECTED_CHECK_YOUR_DRAWING_CODE );
	TVPFaildToCreateDirect3D.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILD_TO_CREATE_DIRECT3D, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILD_TO_CREATE_DIRECT3D );
	TVPFaildToDecideBackbufferFormat.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILD_TO_DECIDE_BACKBUFFER_FORMAT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILD_TO_DECIDE_BACKBUFFER_FORMAT );
	TVPFaildToCreateDirect3DDevice.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILD_TO_CREATE_DIRECT3DDEVICE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILD_TO_CREATE_DIRECT3DDEVICE );
	TVPFaildToSetViewport.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILD_TO_SET_VIEWPORT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILD_TO_SET_VIEWPORT );
	TVPFaildToSetRenderState.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILD_TO_SET_RENDER_STATE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILD_TO_SET_RENDER_STATE );
	TVPWarningImageSizeTooLargeMayBeCannotCreateTexture.AssignMessage( mes = p->GetMessage( NUM_TVP_WARNING_IMAGE_SIZE_TOO_LARGE_MAY_BE_CANNOT_CREATE_TEXTURE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_WARNING_IMAGE_SIZE_TOO_LARGE_MAY_BE_CANNOT_CREATE_TEXTURE );
	TVPUsePowerOfTwoSurface.AssignMessage( mes = p->GetMessage( NUM_TVP_USE_POWER_OF_TWO_SURFACE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_USE_POWER_OF_TWO_SURFACE );
	TVPCannotAllocateD3DOffScreenSurface.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_ALLOCATE_D3DOFF_SCREEN_SURFACE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_ALLOCATE_D3DOFF_SCREEN_SURFACE );
	TVPBasicDrawDeviceFailedToCreateDirect3DDevices.AssignMessage( mes = p->GetMessage( NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICES, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICES );
	TVPBasicDrawDeviceFailedToCreateDirect3DDevicesUnknownReason.AssignMessage( mes = p->GetMessage( NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICES_UNKNOWN_REASON, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICES_UNKNOWN_REASON );
	TVPBasicDrawDeviceTextureHasAlreadyBeenLocked.AssignMessage( mes = p->GetMessage( NUM_TVP_BASIC_DRAW_DEVICE_TEXTURE_HAS_ALREADY_BEEN_LOCKED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BASIC_DRAW_DEVICE_TEXTURE_HAS_ALREADY_BEEN_LOCKED );
	TVPInternalErrorResult.AssignMessage( mes = p->GetMessage( NUM_TVP_INTERNAL_ERROR_RESULT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INTERNAL_ERROR_RESULT );
	TVPBasicDrawDeviceInfPolygonDrawingFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_BASIC_DRAW_DEVICE_INF_POLYGON_DRAWING_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BASIC_DRAW_DEVICE_INF_POLYGON_DRAWING_FAILED );
	TVPBasicDrawDeviceInfDirect3DDevicePresentFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_BASIC_DRAW_DEVICE_INF_DIRECT3DDEVICE_PRESENT_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BASIC_DRAW_DEVICE_INF_DIRECT3DDEVICE_PRESENT_FAILED );
	TVPChangeDisplaySettingsFailedDispChangeRestart.AssignMessage( mes = p->GetMessage( NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_RESTART, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_RESTART );
	TVPChangeDisplaySettingsFailedDispChangeBadFlags.AssignMessage( mes = p->GetMessage( NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_BAD_FLAGS, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_BAD_FLAGS );
	TVPChangeDisplaySettingsFailedDispChangeBadParam.AssignMessage( mes = p->GetMessage( NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_BAD_PARAM, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_BAD_PARAM );
	TVPChangeDisplaySettingsFailedDispChangeFailed.AssignMessage( mes = p->GetMessage( NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_FAILED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_FAILED );
	TVPChangeDisplaySettingsFailedDispChangeBadMode.AssignMessage( mes = p->GetMessage( NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_BAD_MODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_BAD_MODE );
	TVPChangeDisplaySettingsFailedDispChangeNotUpdated.AssignMessage( mes = p->GetMessage( NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_NOT_UPDATED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_DISP_CHANGE_NOT_UPDATED );
	TVPChangeDisplaySettingsFailedUnknownReason.AssignMessage( mes = p->GetMessage( NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_UNKNOWN_REASON, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CHANGE_DISPLAY_SETTINGS_FAILED_UNKNOWN_REASON );
	TVPFailedToCreateScreenDC.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILED_TO_CREATE_SCREEN_DC, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILED_TO_CREATE_SCREEN_DC );
	TVPFailedToCreateOffscreenBitmap.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILED_TO_CREATE_OFFSCREEN_BITMAP, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILED_TO_CREATE_OFFSCREEN_BITMAP );
	TVPFailedToCreateOffscreenDC.AssignMessage( mes = p->GetMessage( NUM_TVP_FAILED_TO_CREATE_OFFSCREEN_DC, length ), length ); p->ReleaseMessage( mes, NUM_TVP_FAILED_TO_CREATE_OFFSCREEN_DC );
	TVPInfoSusiePluginInfo.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_SUSIE_PLUGIN_INFO, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_SUSIE_PLUGIN_INFO );
	TVPSusiePluginUnsupportedBitmapHeader.AssignMessage( mes = p->GetMessage( NUM_TVP_SUSIE_PLUGIN_UNSUPPORTED_BITMAP_HEADER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SUSIE_PLUGIN_UNSUPPORTED_BITMAP_HEADER );
	TVPBasicDrawDeviceFailedToCreateDirect3DDevice.AssignMessage( mes = p->GetMessage( NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICE );
	TVPBasicDrawDeviceFailedToCreateDirect3DDeviceUnknownReason.AssignMessage( mes = p->GetMessage( NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICE_UNKNOWN_REASON, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BASIC_DRAW_DEVICE_FAILED_TO_CREATE_DIRECT3DDEVICE_UNKNOWN_REASON );
	TVPCouldNotCreateAnyDrawDevice.AssignMessage( mes = p->GetMessage( NUM_TVP_COULD_NOT_CREATE_ANY_DRAW_DEVICE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_COULD_NOT_CREATE_ANY_DRAW_DEVICE );
	TVPBasicDrawDeviceDoesNotSupporteLayerManagerMoreThanOne.AssignMessage( mes = p->GetMessage( NUM_TVP_BASIC_DRAW_DEVICE_DOES_NOT_SUPPORTE_LAYER_MANAGER_MORE_THAN_ONE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_BASIC_DRAW_DEVICE_DOES_NOT_SUPPORTE_LAYER_MANAGER_MORE_THAN_ONE );
	TVPInvalidVideoSize.AssignMessage( mes = p->GetMessage( NUM_TVP_INVALID_VIDEO_SIZE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INVALID_VIDEO_SIZE );
	TVPRoughVsyncIntervalReadFromApi.AssignMessage( mes = p->GetMessage( NUM_TVP_ROUGH_VSYNC_INTERVAL_READ_FROM_API, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ROUGH_VSYNC_INTERVAL_READ_FROM_API );
	TVPRoughVsyncIntervalStillSeemsWrong.AssignMessage( mes = p->GetMessage( NUM_TVP_ROUGH_VSYNC_INTERVAL_STILL_SEEMS_WRONG, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ROUGH_VSYNC_INTERVAL_STILL_SEEMS_WRONG );
	TVPInfoFoundDirect3DInterface.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_FOUND_DIRECT3DINTERFACE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_FOUND_DIRECT3DINTERFACE );
	TVPInfoFaild.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_FAILD, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_FAILD );
	TVPInfoDirect3D.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_DIRECT3D, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_DIRECT3D );
	TVPCannotLoadD3DDLL.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_LOAD_D3DDLL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_LOAD_D3DDLL );
	TVPNotFoundDirect3DCreate.AssignMessage( mes = p->GetMessage( NUM_TVP_NOT_FOUND_DIRECT3DCREATE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_NOT_FOUND_DIRECT3DCREATE );
	TVPInfoEnvironmentUsing.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_ENVIRONMENT_USING, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_ENVIRONMENT_USING );
	TVPInfoSearchBestFullscreenResolution.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_SEARCH_BEST_FULLSCREEN_RESOLUTION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_SEARCH_BEST_FULLSCREEN_RESOLUTION );
	TVPInfoConditionPreferredScreenMode.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_CONDITION_PREFERRED_SCREEN_MODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_CONDITION_PREFERRED_SCREEN_MODE );
	TVPInfoConditionMode.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_CONDITION_MODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_CONDITION_MODE );
	TVPInfoConditionZoomMode.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_CONDITION_ZOOM_MODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_CONDITION_ZOOM_MODE );
	TVPInfoEnvironmentDefaultScreenMode.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_ENVIRONMENT_DEFAULT_SCREEN_MODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_ENVIRONMENT_DEFAULT_SCREEN_MODE );
	TVPInfoEnvironmentDefaultScreenAspectRatio.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_ENVIRONMENT_DEFAULT_SCREEN_ASPECT_RATIO, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_ENVIRONMENT_DEFAULT_SCREEN_ASPECT_RATIO );
	TVPInfoEnvironmentAvailableDisplayModes.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_ENVIRONMENT_AVAILABLE_DISPLAY_MODES, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_ENVIRONMENT_AVAILABLE_DISPLAY_MODES );
	TVPInfoNotFoundScreenModeFromDriver.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_NOT_FOUND_SCREEN_MODE_FROM_DRIVER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_NOT_FOUND_SCREEN_MODE_FROM_DRIVER );
	TVPInfoResultCandidates.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_RESULT_CANDIDATES, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_RESULT_CANDIDATES );
	TVPInfoTryScreenMode.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_TRY_SCREEN_MODE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_TRY_SCREEN_MODE );
	TVPAllScreenModeError.AssignMessage( mes = p->GetMessage( NUM_TVP_ALL_SCREEN_MODE_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_ALL_SCREEN_MODE_ERROR );
	TVPInfoChangeScreenModeSuccess.AssignMessage( mes = p->GetMessage( NUM_TVP_INFO_CHANGE_SCREEN_MODE_SUCCESS, length ), length ); p->ReleaseMessage( mes, NUM_TVP_INFO_CHANGE_SCREEN_MODE_SUCCESS );
	TVPSelectXP3FileOrFolder.AssignMessage( mes = p->GetMessage( NUM_TVP_SELECT_XP3FILE_OR_FOLDER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_SELECT_XP3FILE_OR_FOLDER );
	TVPD3dErrDeviceLost.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_DEVICE_LOST, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_DEVICE_LOST );
	TVPD3dErrDriverIinternalError.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_DRIVER_IINTERNAL_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_DRIVER_IINTERNAL_ERROR );
	TVPD3dErrInvalidCall.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_INVALID_CALL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_INVALID_CALL );
	TVPD3dErrOutOfVideoMemory.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_OUT_OF_VIDEO_MEMORY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_OUT_OF_VIDEO_MEMORY );
	TVPD3dErrOutOfMemory.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_OUT_OF_MEMORY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_OUT_OF_MEMORY );
	TVPD3dErrWrongTextureFormat.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_WRONG_TEXTURE_FORMAT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_WRONG_TEXTURE_FORMAT );
	TVPD3dErrUnsuportedColorOperation.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_UNSUPORTED_COLOR_OPERATION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_UNSUPORTED_COLOR_OPERATION );
	TVPD3dErrUnsuportedColorArg.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_UNSUPORTED_COLOR_ARG, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_UNSUPORTED_COLOR_ARG );
	TVPD3dErrUnsuportedAalphtOperation.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_UNSUPORTED_AALPHT_OPERATION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_UNSUPORTED_AALPHT_OPERATION );
	TVPD3dErrUnsuportedAlphaArg.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_UNSUPORTED_ALPHA_ARG, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_UNSUPORTED_ALPHA_ARG );
	TVPD3dErrTooManyOperations.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_TOO_MANY_OPERATIONS, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_TOO_MANY_OPERATIONS );
	TVPD3dErrConflictioningTextureFilter.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_CONFLICTIONING_TEXTURE_FILTER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_CONFLICTIONING_TEXTURE_FILTER );
	TVPD3dErrUnsuportedFactorValue.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_UNSUPORTED_FACTOR_VALUE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_UNSUPORTED_FACTOR_VALUE );
	TVPD3dErrConflictioningRenderState.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_CONFLICTIONING_RENDER_STATE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_CONFLICTIONING_RENDER_STATE );
	TVPD3dErrUnsupportedTextureFilter.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_UNSUPPORTED_TEXTURE_FILTER, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_UNSUPPORTED_TEXTURE_FILTER );
	TVPD3dErrConflictioningTexturePalette.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_CONFLICTIONING_TEXTURE_PALETTE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_CONFLICTIONING_TEXTURE_PALETTE );
	TVPD3dErrNotFound.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_NOT_FOUND, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_NOT_FOUND );
	TVPD3dErrMoreData.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_MORE_DATA, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_MORE_DATA );
	TVPD3dErrDeviceNotReset.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_DEVICE_NOT_RESET, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_DEVICE_NOT_RESET );
	TVPD3dErrNotAvailable.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_NOT_AVAILABLE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_NOT_AVAILABLE );
	TVPD3dErrInvalidDevice.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_INVALID_DEVICE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_INVALID_DEVICE );
	TVPD3dErrDriverInvalidCall.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_DRIVER_INVALID_CALL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_DRIVER_INVALID_CALL );
	TVPD3dErrWasStillDrawing.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_WAS_STILL_DRAWING, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_WAS_STILL_DRAWING );
	TVPD3dErrDeviceHung.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_DEVICE_HUNG, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_DEVICE_HUNG );
	TVPD3dErrUnsupportedOverlay.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_UNSUPPORTED_OVERLAY, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_UNSUPPORTED_OVERLAY );
	TVPD3dErrUnsupportedOverlayFormat.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_UNSUPPORTED_OVERLAY_FORMAT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_UNSUPPORTED_OVERLAY_FORMAT );
	TVPD3dErrCannotProtectContent.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_CANNOT_PROTECT_CONTENT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_CANNOT_PROTECT_CONTENT );
	TVPD3dErrUnsupportedCrypto.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_UNSUPPORTED_CRYPTO, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_UNSUPPORTED_CRYPTO );
	TVPD3dErrPresentStatisticsDisJoint.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_PRESENT_STATISTICS_DIS_JOINT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_PRESENT_STATISTICS_DIS_JOINT );
	TVPD3dErrDeviceRemoved.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_DEVICE_REMOVED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_DEVICE_REMOVED );
	TVPD3dOkNoAutoGen.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_OK_NO_AUTO_GEN, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_OK_NO_AUTO_GEN );
	TVPD3dErrFail.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_FAIL, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_FAIL );
	TVPD3dErrInvalidArg.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_ERR_INVALID_ARG, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_ERR_INVALID_ARG );
	TVPD3dUnknownError.AssignMessage( mes = p->GetMessage( NUM_TVP_D3D_UNKNOWN_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_D3D_UNKNOWN_ERROR );
	TVPExceptionAccessViolation.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_ACCESS_VIOLATION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_ACCESS_VIOLATION );
	TVPExceptionBreakpoint.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_BREAKPOINT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_BREAKPOINT );
	TVPExceptionDatatypeMisalignment.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_DATATYPE_MISALIGNMENT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_DATATYPE_MISALIGNMENT );
	TVPExceptionSingleStep.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_SINGLE_STEP, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_SINGLE_STEP );
	TVPExceptionArrayBoundsExceeded.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_ARRAY_BOUNDS_EXCEEDED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_ARRAY_BOUNDS_EXCEEDED );
	TVPExceptionFltDenormalOperand.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_FLT_DENORMAL_OPERAND, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_FLT_DENORMAL_OPERAND );
	TVPExceptionFltDivideByZero.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_FLT_DIVIDE_BY_ZERO, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_FLT_DIVIDE_BY_ZERO );
	TVPExceptionFltInexactResult.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_FLT_INEXACT_RESULT, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_FLT_INEXACT_RESULT );
	TVPExceptionFltInvalidOperation.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_FLT_INVALID_OPERATION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_FLT_INVALID_OPERATION );
	TVPExceptionFltOverflow.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_FLT_OVERFLOW, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_FLT_OVERFLOW );
	TVPExceptionFltStackCheck.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_FLT_STACK_CHECK, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_FLT_STACK_CHECK );
	TVPExceptionFltUnderflow.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_FLT_UNDERFLOW, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_FLT_UNDERFLOW );
	TVPExceptionIntDivideByZero.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_INT_DIVIDE_BY_ZERO, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_INT_DIVIDE_BY_ZERO );
	TVPExceptionIntOverflow.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_INT_OVERFLOW, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_INT_OVERFLOW );
	TVPExceptionPrivInstruction.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_PRIV_INSTRUCTION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_PRIV_INSTRUCTION );
	TVPExceptionNoncontinuableException.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_NONCONTINUABLE_EXCEPTION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_NONCONTINUABLE_EXCEPTION );
	TVPExceptionGuardPage.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_GUARD_PAGE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_GUARD_PAGE );
	TVPExceptionIllegalInstruction.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_ILLEGAL_INSTRUCTION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_ILLEGAL_INSTRUCTION );
	TVPExceptionInPageError.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_IN_PAGE_ERROR, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_IN_PAGE_ERROR );
	TVPExceptionInvalidDisposition.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_INVALID_DISPOSITION, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_INVALID_DISPOSITION );
	TVPExceptionInvalidHandle.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_INVALID_HANDLE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_INVALID_HANDLE );
	TVPExceptionStackOverflow.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_STACK_OVERFLOW, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_STACK_OVERFLOW );
	TVPExceptionUnwindCconsolidate.AssignMessage( mes = p->GetMessage( NUM_TVP_EXCEPTION_UNWIND_CCONSOLIDATE, length ), length ); p->ReleaseMessage( mes, NUM_TVP_EXCEPTION_UNWIND_CCONSOLIDATE );
	TVPCannotShowModalAreadyShowed.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_SHOW_MODAL_AREADY_SHOWED, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_SHOW_MODAL_AREADY_SHOWED );
	TVPCannotShowModalSingleWindow.AssignMessage( mes = p->GetMessage( NUM_TVP_CANNOT_SHOW_MODAL_SINGLE_WINDOW, length ), length ); p->ReleaseMessage( mes, NUM_TVP_CANNOT_SHOW_MODAL_SINGLE_WINDOW );
}
